/*
 * Web Application Firewall API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WAFDomains200;
import org.openapitools.client.model.WAFEvents200;
import org.openapitools.client.model.WAFEvents400;
import org.openapitools.client.model.WAFEvents401;
import org.openapitools.client.model.WAFEvents404;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WafApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WafApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WafApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getWAFDomains
     * @param wafId ID of WAF to return (required)
     * @param name searches WAF for name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWAFDomainsCall(Long wafId, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waf/{wafId}/domains"
            .replace("{" + "wafId" + "}", localVarApiClient.escapeString(wafId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json; version=3"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWAFDomainsValidateBeforeCall(Long wafId, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wafId' is set
        if (wafId == null) {
            throw new ApiException("Missing the required parameter 'wafId' when calling getWAFDomains(Async)");
        }

        return getWAFDomainsCall(wafId, name, _callback);

    }

    /**
     * Find domains attached to a WAF
     * 
     * @param wafId ID of WAF to return (required)
     * @param name searches WAF for name (optional)
     * @return WAFDomains200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public WAFDomains200 getWAFDomains(Long wafId, String name) throws ApiException {
        ApiResponse<WAFDomains200> localVarResp = getWAFDomainsWithHttpInfo(wafId, name);
        return localVarResp.getData();
    }

    /**
     * Find domains attached to a WAF
     * 
     * @param wafId ID of WAF to return (required)
     * @param name searches WAF for name (optional)
     * @return ApiResponse&lt;WAFDomains200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WAFDomains200> getWAFDomainsWithHttpInfo(Long wafId, String name) throws ApiException {
        okhttp3.Call localVarCall = getWAFDomainsValidateBeforeCall(wafId, name, null);
        Type localVarReturnType = new TypeToken<WAFDomains200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find domains attached to a WAF (asynchronously)
     * 
     * @param wafId ID of WAF to return (required)
     * @param name searches WAF for name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWAFDomainsAsync(Long wafId, String name, final ApiCallback<WAFDomains200> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWAFDomainsValidateBeforeCall(wafId, name, _callback);
        Type localVarReturnType = new TypeToken<WAFDomains200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWAFEvents
     * @param wafId ID of WAF to return (required)
     * @param hourRange Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
     * @param domainsIds Multiple domain&#39;s id (they must be separated by comma like 1233,1234) (required)
     * @param networkListId Id of a network list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> data not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWAFEventsCall(Long wafId, Long hourRange, String domainsIds, Long networkListId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/waf/{wafId}/waf_events"
            .replace("{" + "wafId" + "}", localVarApiClient.escapeString(wafId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hourRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hour_range", hourRange));
        }

        if (networkListId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network_list_id", networkListId));
        }

        if (domainsIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domains_ids", domainsIds));
        }

        final String[] localVarAccepts = {
            "application/json; version=3"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWAFEventsValidateBeforeCall(Long wafId, Long hourRange, String domainsIds, Long networkListId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'wafId' is set
        if (wafId == null) {
            throw new ApiException("Missing the required parameter 'wafId' when calling getWAFEvents(Async)");
        }

        // verify the required parameter 'hourRange' is set
        if (hourRange == null) {
            throw new ApiException("Missing the required parameter 'hourRange' when calling getWAFEvents(Async)");
        }

        // verify the required parameter 'domainsIds' is set
        if (domainsIds == null) {
            throw new ApiException("Missing the required parameter 'domainsIds' when calling getWAFEvents(Async)");
        }

        return getWAFEventsCall(wafId, hourRange, domainsIds, networkListId, _callback);

    }

    /**
     * Find WAF log events
     * 
     * @param wafId ID of WAF to return (required)
     * @param hourRange Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
     * @param domainsIds Multiple domain&#39;s id (they must be separated by comma like 1233,1234) (required)
     * @param networkListId Id of a network list (optional)
     * @return WAFEvents200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> data not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized operation </td><td>  -  </td></tr>
     </table>
     */
    public WAFEvents200 getWAFEvents(Long wafId, Long hourRange, String domainsIds, Long networkListId) throws ApiException {
        ApiResponse<WAFEvents200> localVarResp = getWAFEventsWithHttpInfo(wafId, hourRange, domainsIds, networkListId);
        return localVarResp.getData();
    }

    /**
     * Find WAF log events
     * 
     * @param wafId ID of WAF to return (required)
     * @param hourRange Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
     * @param domainsIds Multiple domain&#39;s id (they must be separated by comma like 1233,1234) (required)
     * @param networkListId Id of a network list (optional)
     * @return ApiResponse&lt;WAFEvents200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> data not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WAFEvents200> getWAFEventsWithHttpInfo(Long wafId, Long hourRange, String domainsIds, Long networkListId) throws ApiException {
        okhttp3.Call localVarCall = getWAFEventsValidateBeforeCall(wafId, hourRange, domainsIds, networkListId, null);
        Type localVarReturnType = new TypeToken<WAFEvents200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Find WAF log events (asynchronously)
     * 
     * @param wafId ID of WAF to return (required)
     * @param hourRange Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
     * @param domainsIds Multiple domain&#39;s id (they must be separated by comma like 1233,1234) (required)
     * @param networkListId Id of a network list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> data not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWAFEventsAsync(Long wafId, Long hourRange, String domainsIds, Long networkListId, final ApiCallback<WAFEvents200> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWAFEventsValidateBeforeCall(wafId, hourRange, domainsIds, networkListId, _callback);
        Type localVarReturnType = new TypeToken<WAFEvents200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
