/*
 * Web Application Firewall API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WAFSensitivityChoices;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SingleWAF
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-02T15:18:24.198821Z[GMT]")
public class SingleWAF {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    BLOCKING("blocking"),
    
    COUNTING("counting");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_SQL_INJECTION = "sql_injection";
  @SerializedName(SERIALIZED_NAME_SQL_INJECTION)
  private Boolean sqlInjection;

  public static final String SERIALIZED_NAME_SQL_INJECTION_SENSITIVITY = "sql_injection_sensitivity";
  @SerializedName(SERIALIZED_NAME_SQL_INJECTION_SENSITIVITY)
  private WAFSensitivityChoices sqlInjectionSensitivity;

  public static final String SERIALIZED_NAME_REMOTE_FILE_INCLUSION = "remote_file_inclusion";
  @SerializedName(SERIALIZED_NAME_REMOTE_FILE_INCLUSION)
  private Boolean remoteFileInclusion;

  public static final String SERIALIZED_NAME_REMOTE_FILE_INCLUSION_SENSITIVITY = "remote_file_inclusion_sensitivity";
  @SerializedName(SERIALIZED_NAME_REMOTE_FILE_INCLUSION_SENSITIVITY)
  private WAFSensitivityChoices remoteFileInclusionSensitivity;

  public static final String SERIALIZED_NAME_DIRECTORY_TRAVERSAL = "directory_traversal";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_TRAVERSAL)
  private Boolean directoryTraversal;

  public static final String SERIALIZED_NAME_DIRECTORY_TRAVERSAL_SENSITIVITY = "directory_traversal_sensitivity";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_TRAVERSAL_SENSITIVITY)
  private WAFSensitivityChoices directoryTraversalSensitivity;

  public static final String SERIALIZED_NAME_CROSS_SITE_SCRIPTING = "cross_site_scripting";
  @SerializedName(SERIALIZED_NAME_CROSS_SITE_SCRIPTING)
  private Boolean crossSiteScripting;

  public static final String SERIALIZED_NAME_CROSS_SITE_SCRIPTING_SENSITIVITY = "cross_site_scripting_sensitivity";
  @SerializedName(SERIALIZED_NAME_CROSS_SITE_SCRIPTING_SENSITIVITY)
  private WAFSensitivityChoices crossSiteScriptingSensitivity;

  public static final String SERIALIZED_NAME_EVADING_TRICKS = "evading_tricks";
  @SerializedName(SERIALIZED_NAME_EVADING_TRICKS)
  private Boolean evadingTricks;

  public static final String SERIALIZED_NAME_EVADING_TRICKS_SENSITIVITY = "evading_tricks_sensitivity";
  @SerializedName(SERIALIZED_NAME_EVADING_TRICKS_SENSITIVITY)
  private WAFSensitivityChoices evadingTricksSensitivity;

  public static final String SERIALIZED_NAME_FILE_UPLOAD = "file_upload";
  @SerializedName(SERIALIZED_NAME_FILE_UPLOAD)
  private Boolean fileUpload;

  public static final String SERIALIZED_NAME_FILE_UPLOAD_SENSITIVITY = "file_upload_sensitivity";
  @SerializedName(SERIALIZED_NAME_FILE_UPLOAD_SENSITIVITY)
  private WAFSensitivityChoices fileUploadSensitivity;

  public static final String SERIALIZED_NAME_UNWANTED_ACCESS = "unwanted_access";
  @SerializedName(SERIALIZED_NAME_UNWANTED_ACCESS)
  private Boolean unwantedAccess;

  public static final String SERIALIZED_NAME_UNWANTED_ACCESS_SENSITIVITY = "unwanted_access_sensitivity";
  @SerializedName(SERIALIZED_NAME_UNWANTED_ACCESS_SENSITIVITY)
  private WAFSensitivityChoices unwantedAccessSensitivity;

  public static final String SERIALIZED_NAME_IDENTIFIED_ATTACK = "identified_attack";
  @SerializedName(SERIALIZED_NAME_IDENTIFIED_ATTACK)
  private Boolean identifiedAttack;

  public static final String SERIALIZED_NAME_IDENTIFIED_ATTACK_SENSITIVITY = "identified_attack_sensitivity";
  @SerializedName(SERIALIZED_NAME_IDENTIFIED_ATTACK_SENSITIVITY)
  private WAFSensitivityChoices identifiedAttackSensitivity;

  public static final String SERIALIZED_NAME_BYPASS_ADDRESSES = "bypass_addresses";
  @SerializedName(SERIALIZED_NAME_BYPASS_ADDRESSES)
  private List<String> bypassAddresses;

  public SingleWAF() {
  }

  public SingleWAF id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public SingleWAF name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Identification name for WAF Rule Set.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public SingleWAF mode(ModeEnum mode) {
    
    this.mode = mode;
    return this;
  }

   /**
   * Get mode
   * @return mode
  **/
  @javax.annotation.Nullable
  public ModeEnum getMode() {
    return mode;
  }


  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }


  public SingleWAF active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public SingleWAF sqlInjection(Boolean sqlInjection) {
    
    this.sqlInjection = sqlInjection;
    return this;
  }

   /**
   * Get sqlInjection
   * @return sqlInjection
  **/
  @javax.annotation.Nullable
  public Boolean getSqlInjection() {
    return sqlInjection;
  }


  public void setSqlInjection(Boolean sqlInjection) {
    this.sqlInjection = sqlInjection;
  }


  public SingleWAF sqlInjectionSensitivity(WAFSensitivityChoices sqlInjectionSensitivity) {
    
    this.sqlInjectionSensitivity = sqlInjectionSensitivity;
    return this;
  }

   /**
   * Get sqlInjectionSensitivity
   * @return sqlInjectionSensitivity
  **/
  @javax.annotation.Nullable
  public WAFSensitivityChoices getSqlInjectionSensitivity() {
    return sqlInjectionSensitivity;
  }


  public void setSqlInjectionSensitivity(WAFSensitivityChoices sqlInjectionSensitivity) {
    this.sqlInjectionSensitivity = sqlInjectionSensitivity;
  }


  public SingleWAF remoteFileInclusion(Boolean remoteFileInclusion) {
    
    this.remoteFileInclusion = remoteFileInclusion;
    return this;
  }

   /**
   * Get remoteFileInclusion
   * @return remoteFileInclusion
  **/
  @javax.annotation.Nullable
  public Boolean getRemoteFileInclusion() {
    return remoteFileInclusion;
  }


  public void setRemoteFileInclusion(Boolean remoteFileInclusion) {
    this.remoteFileInclusion = remoteFileInclusion;
  }


  public SingleWAF remoteFileInclusionSensitivity(WAFSensitivityChoices remoteFileInclusionSensitivity) {
    
    this.remoteFileInclusionSensitivity = remoteFileInclusionSensitivity;
    return this;
  }

   /**
   * Get remoteFileInclusionSensitivity
   * @return remoteFileInclusionSensitivity
  **/
  @javax.annotation.Nullable
  public WAFSensitivityChoices getRemoteFileInclusionSensitivity() {
    return remoteFileInclusionSensitivity;
  }


  public void setRemoteFileInclusionSensitivity(WAFSensitivityChoices remoteFileInclusionSensitivity) {
    this.remoteFileInclusionSensitivity = remoteFileInclusionSensitivity;
  }


  public SingleWAF directoryTraversal(Boolean directoryTraversal) {
    
    this.directoryTraversal = directoryTraversal;
    return this;
  }

   /**
   * Get directoryTraversal
   * @return directoryTraversal
  **/
  @javax.annotation.Nullable
  public Boolean getDirectoryTraversal() {
    return directoryTraversal;
  }


  public void setDirectoryTraversal(Boolean directoryTraversal) {
    this.directoryTraversal = directoryTraversal;
  }


  public SingleWAF directoryTraversalSensitivity(WAFSensitivityChoices directoryTraversalSensitivity) {
    
    this.directoryTraversalSensitivity = directoryTraversalSensitivity;
    return this;
  }

   /**
   * Get directoryTraversalSensitivity
   * @return directoryTraversalSensitivity
  **/
  @javax.annotation.Nullable
  public WAFSensitivityChoices getDirectoryTraversalSensitivity() {
    return directoryTraversalSensitivity;
  }


  public void setDirectoryTraversalSensitivity(WAFSensitivityChoices directoryTraversalSensitivity) {
    this.directoryTraversalSensitivity = directoryTraversalSensitivity;
  }


  public SingleWAF crossSiteScripting(Boolean crossSiteScripting) {
    
    this.crossSiteScripting = crossSiteScripting;
    return this;
  }

   /**
   * Get crossSiteScripting
   * @return crossSiteScripting
  **/
  @javax.annotation.Nullable
  public Boolean getCrossSiteScripting() {
    return crossSiteScripting;
  }


  public void setCrossSiteScripting(Boolean crossSiteScripting) {
    this.crossSiteScripting = crossSiteScripting;
  }


  public SingleWAF crossSiteScriptingSensitivity(WAFSensitivityChoices crossSiteScriptingSensitivity) {
    
    this.crossSiteScriptingSensitivity = crossSiteScriptingSensitivity;
    return this;
  }

   /**
   * Get crossSiteScriptingSensitivity
   * @return crossSiteScriptingSensitivity
  **/
  @javax.annotation.Nullable
  public WAFSensitivityChoices getCrossSiteScriptingSensitivity() {
    return crossSiteScriptingSensitivity;
  }


  public void setCrossSiteScriptingSensitivity(WAFSensitivityChoices crossSiteScriptingSensitivity) {
    this.crossSiteScriptingSensitivity = crossSiteScriptingSensitivity;
  }


  public SingleWAF evadingTricks(Boolean evadingTricks) {
    
    this.evadingTricks = evadingTricks;
    return this;
  }

   /**
   * Get evadingTricks
   * @return evadingTricks
  **/
  @javax.annotation.Nullable
  public Boolean getEvadingTricks() {
    return evadingTricks;
  }


  public void setEvadingTricks(Boolean evadingTricks) {
    this.evadingTricks = evadingTricks;
  }


  public SingleWAF evadingTricksSensitivity(WAFSensitivityChoices evadingTricksSensitivity) {
    
    this.evadingTricksSensitivity = evadingTricksSensitivity;
    return this;
  }

   /**
   * Get evadingTricksSensitivity
   * @return evadingTricksSensitivity
  **/
  @javax.annotation.Nullable
  public WAFSensitivityChoices getEvadingTricksSensitivity() {
    return evadingTricksSensitivity;
  }


  public void setEvadingTricksSensitivity(WAFSensitivityChoices evadingTricksSensitivity) {
    this.evadingTricksSensitivity = evadingTricksSensitivity;
  }


  public SingleWAF fileUpload(Boolean fileUpload) {
    
    this.fileUpload = fileUpload;
    return this;
  }

   /**
   * Get fileUpload
   * @return fileUpload
  **/
  @javax.annotation.Nullable
  public Boolean getFileUpload() {
    return fileUpload;
  }


  public void setFileUpload(Boolean fileUpload) {
    this.fileUpload = fileUpload;
  }


  public SingleWAF fileUploadSensitivity(WAFSensitivityChoices fileUploadSensitivity) {
    
    this.fileUploadSensitivity = fileUploadSensitivity;
    return this;
  }

   /**
   * Get fileUploadSensitivity
   * @return fileUploadSensitivity
  **/
  @javax.annotation.Nullable
  public WAFSensitivityChoices getFileUploadSensitivity() {
    return fileUploadSensitivity;
  }


  public void setFileUploadSensitivity(WAFSensitivityChoices fileUploadSensitivity) {
    this.fileUploadSensitivity = fileUploadSensitivity;
  }


  public SingleWAF unwantedAccess(Boolean unwantedAccess) {
    
    this.unwantedAccess = unwantedAccess;
    return this;
  }

   /**
   * Get unwantedAccess
   * @return unwantedAccess
  **/
  @javax.annotation.Nullable
  public Boolean getUnwantedAccess() {
    return unwantedAccess;
  }


  public void setUnwantedAccess(Boolean unwantedAccess) {
    this.unwantedAccess = unwantedAccess;
  }


  public SingleWAF unwantedAccessSensitivity(WAFSensitivityChoices unwantedAccessSensitivity) {
    
    this.unwantedAccessSensitivity = unwantedAccessSensitivity;
    return this;
  }

   /**
   * Get unwantedAccessSensitivity
   * @return unwantedAccessSensitivity
  **/
  @javax.annotation.Nullable
  public WAFSensitivityChoices getUnwantedAccessSensitivity() {
    return unwantedAccessSensitivity;
  }


  public void setUnwantedAccessSensitivity(WAFSensitivityChoices unwantedAccessSensitivity) {
    this.unwantedAccessSensitivity = unwantedAccessSensitivity;
  }


  public SingleWAF identifiedAttack(Boolean identifiedAttack) {
    
    this.identifiedAttack = identifiedAttack;
    return this;
  }

   /**
   * Get identifiedAttack
   * @return identifiedAttack
  **/
  @javax.annotation.Nullable
  public Boolean getIdentifiedAttack() {
    return identifiedAttack;
  }


  public void setIdentifiedAttack(Boolean identifiedAttack) {
    this.identifiedAttack = identifiedAttack;
  }


  public SingleWAF identifiedAttackSensitivity(WAFSensitivityChoices identifiedAttackSensitivity) {
    
    this.identifiedAttackSensitivity = identifiedAttackSensitivity;
    return this;
  }

   /**
   * Get identifiedAttackSensitivity
   * @return identifiedAttackSensitivity
  **/
  @javax.annotation.Nullable
  public WAFSensitivityChoices getIdentifiedAttackSensitivity() {
    return identifiedAttackSensitivity;
  }


  public void setIdentifiedAttackSensitivity(WAFSensitivityChoices identifiedAttackSensitivity) {
    this.identifiedAttackSensitivity = identifiedAttackSensitivity;
  }


  public SingleWAF bypassAddresses(List<String> bypassAddresses) {
    
    this.bypassAddresses = bypassAddresses;
    return this;
  }

  public SingleWAF addBypassAddressesItem(String bypassAddressesItem) {
    if (this.bypassAddresses == null) {
      this.bypassAddresses = new ArrayList<>();
    }
    this.bypassAddresses.add(bypassAddressesItem);
    return this;
  }

   /**
   * Get bypassAddresses
   * @return bypassAddresses
  **/
  @javax.annotation.Nullable
  public List<String> getBypassAddresses() {
    return bypassAddresses;
  }


  public void setBypassAddresses(List<String> bypassAddresses) {
    this.bypassAddresses = bypassAddresses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SingleWAF singleWAF = (SingleWAF) o;
    return Objects.equals(this.id, singleWAF.id) &&
        Objects.equals(this.name, singleWAF.name) &&
        Objects.equals(this.mode, singleWAF.mode) &&
        Objects.equals(this.active, singleWAF.active) &&
        Objects.equals(this.sqlInjection, singleWAF.sqlInjection) &&
        Objects.equals(this.sqlInjectionSensitivity, singleWAF.sqlInjectionSensitivity) &&
        Objects.equals(this.remoteFileInclusion, singleWAF.remoteFileInclusion) &&
        Objects.equals(this.remoteFileInclusionSensitivity, singleWAF.remoteFileInclusionSensitivity) &&
        Objects.equals(this.directoryTraversal, singleWAF.directoryTraversal) &&
        Objects.equals(this.directoryTraversalSensitivity, singleWAF.directoryTraversalSensitivity) &&
        Objects.equals(this.crossSiteScripting, singleWAF.crossSiteScripting) &&
        Objects.equals(this.crossSiteScriptingSensitivity, singleWAF.crossSiteScriptingSensitivity) &&
        Objects.equals(this.evadingTricks, singleWAF.evadingTricks) &&
        Objects.equals(this.evadingTricksSensitivity, singleWAF.evadingTricksSensitivity) &&
        Objects.equals(this.fileUpload, singleWAF.fileUpload) &&
        Objects.equals(this.fileUploadSensitivity, singleWAF.fileUploadSensitivity) &&
        Objects.equals(this.unwantedAccess, singleWAF.unwantedAccess) &&
        Objects.equals(this.unwantedAccessSensitivity, singleWAF.unwantedAccessSensitivity) &&
        Objects.equals(this.identifiedAttack, singleWAF.identifiedAttack) &&
        Objects.equals(this.identifiedAttackSensitivity, singleWAF.identifiedAttackSensitivity) &&
        Objects.equals(this.bypassAddresses, singleWAF.bypassAddresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, mode, active, sqlInjection, sqlInjectionSensitivity, remoteFileInclusion, remoteFileInclusionSensitivity, directoryTraversal, directoryTraversalSensitivity, crossSiteScripting, crossSiteScriptingSensitivity, evadingTricks, evadingTricksSensitivity, fileUpload, fileUploadSensitivity, unwantedAccess, unwantedAccessSensitivity, identifiedAttack, identifiedAttackSensitivity, bypassAddresses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SingleWAF {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    sqlInjection: ").append(toIndentedString(sqlInjection)).append("\n");
    sb.append("    sqlInjectionSensitivity: ").append(toIndentedString(sqlInjectionSensitivity)).append("\n");
    sb.append("    remoteFileInclusion: ").append(toIndentedString(remoteFileInclusion)).append("\n");
    sb.append("    remoteFileInclusionSensitivity: ").append(toIndentedString(remoteFileInclusionSensitivity)).append("\n");
    sb.append("    directoryTraversal: ").append(toIndentedString(directoryTraversal)).append("\n");
    sb.append("    directoryTraversalSensitivity: ").append(toIndentedString(directoryTraversalSensitivity)).append("\n");
    sb.append("    crossSiteScripting: ").append(toIndentedString(crossSiteScripting)).append("\n");
    sb.append("    crossSiteScriptingSensitivity: ").append(toIndentedString(crossSiteScriptingSensitivity)).append("\n");
    sb.append("    evadingTricks: ").append(toIndentedString(evadingTricks)).append("\n");
    sb.append("    evadingTricksSensitivity: ").append(toIndentedString(evadingTricksSensitivity)).append("\n");
    sb.append("    fileUpload: ").append(toIndentedString(fileUpload)).append("\n");
    sb.append("    fileUploadSensitivity: ").append(toIndentedString(fileUploadSensitivity)).append("\n");
    sb.append("    unwantedAccess: ").append(toIndentedString(unwantedAccess)).append("\n");
    sb.append("    unwantedAccessSensitivity: ").append(toIndentedString(unwantedAccessSensitivity)).append("\n");
    sb.append("    identifiedAttack: ").append(toIndentedString(identifiedAttack)).append("\n");
    sb.append("    identifiedAttackSensitivity: ").append(toIndentedString(identifiedAttackSensitivity)).append("\n");
    sb.append("    bypassAddresses: ").append(toIndentedString(bypassAddresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("mode");
    openapiFields.add("active");
    openapiFields.add("sql_injection");
    openapiFields.add("sql_injection_sensitivity");
    openapiFields.add("remote_file_inclusion");
    openapiFields.add("remote_file_inclusion_sensitivity");
    openapiFields.add("directory_traversal");
    openapiFields.add("directory_traversal_sensitivity");
    openapiFields.add("cross_site_scripting");
    openapiFields.add("cross_site_scripting_sensitivity");
    openapiFields.add("evading_tricks");
    openapiFields.add("evading_tricks_sensitivity");
    openapiFields.add("file_upload");
    openapiFields.add("file_upload_sensitivity");
    openapiFields.add("unwanted_access");
    openapiFields.add("unwanted_access_sensitivity");
    openapiFields.add("identified_attack");
    openapiFields.add("identified_attack_sensitivity");
    openapiFields.add("bypass_addresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SingleWAF
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SingleWAF.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SingleWAF is not found in the empty JSON string", SingleWAF.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SingleWAF.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SingleWAF` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bypass_addresses") != null && !jsonObj.get("bypass_addresses").isJsonNull() && !jsonObj.get("bypass_addresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bypass_addresses` to be an array in the JSON string but got `%s`", jsonObj.get("bypass_addresses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SingleWAF.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SingleWAF' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SingleWAF> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SingleWAF.class));

       return (TypeAdapter<T>) new TypeAdapter<SingleWAF>() {
           @Override
           public void write(JsonWriter out, SingleWAF value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SingleWAF read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SingleWAF given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SingleWAF
  * @throws IOException if the JSON string is invalid with respect to SingleWAF
  */
  public static SingleWAF fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SingleWAF.class);
  }

 /**
  * Convert an instance of SingleWAF to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

