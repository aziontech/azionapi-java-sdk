/*
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EndpointGoogleBigQueryServiceAccountKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EndpointGoogleBigQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-01T19:02:16.279151Z[GMT]")
public class EndpointGoogleBigQuery {
  public static final String SERIALIZED_NAME_ENDPOINT_TYPE = "endpoint_type";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_TYPE)
  private String endpointType;

  public static final String SERIALIZED_NAME_DATASET_ID = "dataset_id";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public static final String SERIALIZED_NAME_TABLE_ID = "table_id";
  @SerializedName(SERIALIZED_NAME_TABLE_ID)
  private String tableId;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_KEY = "service_account_key";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_KEY)
  private EndpointGoogleBigQueryServiceAccountKey serviceAccountKey;

  public EndpointGoogleBigQuery() {
  }

  public EndpointGoogleBigQuery endpointType(String endpointType) {
    
    this.endpointType = endpointType;
    return this;
  }

   /**
   * Get endpointType
   * @return endpointType
  **/
  @javax.annotation.Nullable
  public String getEndpointType() {
    return endpointType;
  }


  public void setEndpointType(String endpointType) {
    this.endpointType = endpointType;
  }


  public EndpointGoogleBigQuery datasetId(String datasetId) {
    
    this.datasetId = datasetId;
    return this;
  }

   /**
   * Get datasetId
   * @return datasetId
  **/
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }


  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public EndpointGoogleBigQuery projectId(String projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }


  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }


  public EndpointGoogleBigQuery tableId(String tableId) {
    
    this.tableId = tableId;
    return this;
  }

   /**
   * Get tableId
   * @return tableId
  **/
  @javax.annotation.Nullable
  public String getTableId() {
    return tableId;
  }


  public void setTableId(String tableId) {
    this.tableId = tableId;
  }


  public EndpointGoogleBigQuery serviceAccountKey(EndpointGoogleBigQueryServiceAccountKey serviceAccountKey) {
    
    this.serviceAccountKey = serviceAccountKey;
    return this;
  }

   /**
   * Get serviceAccountKey
   * @return serviceAccountKey
  **/
  @javax.annotation.Nullable
  public EndpointGoogleBigQueryServiceAccountKey getServiceAccountKey() {
    return serviceAccountKey;
  }


  public void setServiceAccountKey(EndpointGoogleBigQueryServiceAccountKey serviceAccountKey) {
    this.serviceAccountKey = serviceAccountKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointGoogleBigQuery endpointGoogleBigQuery = (EndpointGoogleBigQuery) o;
    return Objects.equals(this.endpointType, endpointGoogleBigQuery.endpointType) &&
        Objects.equals(this.datasetId, endpointGoogleBigQuery.datasetId) &&
        Objects.equals(this.projectId, endpointGoogleBigQuery.projectId) &&
        Objects.equals(this.tableId, endpointGoogleBigQuery.tableId) &&
        Objects.equals(this.serviceAccountKey, endpointGoogleBigQuery.serviceAccountKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointType, datasetId, projectId, tableId, serviceAccountKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointGoogleBigQuery {\n");
    sb.append("    endpointType: ").append(toIndentedString(endpointType)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    tableId: ").append(toIndentedString(tableId)).append("\n");
    sb.append("    serviceAccountKey: ").append(toIndentedString(serviceAccountKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpoint_type");
    openapiFields.add("dataset_id");
    openapiFields.add("project_id");
    openapiFields.add("table_id");
    openapiFields.add("service_account_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EndpointGoogleBigQuery
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointGoogleBigQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointGoogleBigQuery is not found in the empty JSON string", EndpointGoogleBigQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EndpointGoogleBigQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointGoogleBigQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpoint_type") != null && !jsonObj.get("endpoint_type").isJsonNull()) && !jsonObj.get("endpoint_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint_type").toString()));
      }
      if ((jsonObj.get("dataset_id") != null && !jsonObj.get("dataset_id").isJsonNull()) && !jsonObj.get("dataset_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataset_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataset_id").toString()));
      }
      if ((jsonObj.get("project_id") != null && !jsonObj.get("project_id").isJsonNull()) && !jsonObj.get("project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_id").toString()));
      }
      if ((jsonObj.get("table_id") != null && !jsonObj.get("table_id").isJsonNull()) && !jsonObj.get("table_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_id").toString()));
      }
      // validate the optional field `service_account_key`
      if (jsonObj.get("service_account_key") != null && !jsonObj.get("service_account_key").isJsonNull()) {
        EndpointGoogleBigQueryServiceAccountKey.validateJsonElement(jsonObj.get("service_account_key"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointGoogleBigQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointGoogleBigQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointGoogleBigQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointGoogleBigQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointGoogleBigQuery>() {
           @Override
           public void write(JsonWriter out, EndpointGoogleBigQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointGoogleBigQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EndpointGoogleBigQuery given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EndpointGoogleBigQuery
  * @throws IOException if the JSON string is invalid with respect to EndpointGoogleBigQuery
  */
  public static EndpointGoogleBigQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointGoogleBigQuery.class);
  }

 /**
  * Convert an instance of EndpointGoogleBigQuery to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

