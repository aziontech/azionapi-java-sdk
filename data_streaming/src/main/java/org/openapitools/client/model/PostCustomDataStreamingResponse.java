/*
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostCustomDataStreamingResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-22T12:30:18.138783Z[GMT]")
public class PostCustomDataStreamingResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Options:  * &#x60;http&#x60; - Edge Applications  * &#x60;waf&#x60; - WAF Events  * &#x60;cells_console&#x60; - Edge Functions  * &#x60;rtm_activity&#x60; - Activity History   
   */
  @JsonAdapter(DataSourceEnum.Adapter.class)
  public enum DataSourceEnum {
    HTTP("http"),
    
    WAF("waf"),
    
    CELLS_CONSOLE("cells_console"),
    
    RTM_ACTIVITY("rtm_activity");

    private String value;

    DataSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataSourceEnum fromValue(String value) {
      for (DataSourceEnum b : DataSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATA_SOURCE = "data_source";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private DataSourceEnum dataSource;

  public static final String SERIALIZED_NAME_TEMPLATE_MODEL = "template_model";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_MODEL)
  private String templateModel;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_ALL_DOMAINS = "all_domains";
  @SerializedName(SERIALIZED_NAME_ALL_DOMAINS)
  private Boolean allDomains;

  public PostCustomDataStreamingResponse() {
  }

  public PostCustomDataStreamingResponse id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public PostCustomDataStreamingResponse name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PostCustomDataStreamingResponse dataSource(DataSourceEnum dataSource) {
    
    this.dataSource = dataSource;
    return this;
  }

   /**
   * Options:  * &#x60;http&#x60; - Edge Applications  * &#x60;waf&#x60; - WAF Events  * &#x60;cells_console&#x60; - Edge Functions  * &#x60;rtm_activity&#x60; - Activity History   
   * @return dataSource
  **/
  @javax.annotation.Nullable
  public DataSourceEnum getDataSource() {
    return dataSource;
  }


  public void setDataSource(DataSourceEnum dataSource) {
    this.dataSource = dataSource;
  }


  public PostCustomDataStreamingResponse templateModel(String templateModel) {
    
    this.templateModel = templateModel;
    return this;
  }

   /**
   * Note:  * Add all variables and values that will be used to stream according to the data source you choose to use.   
   * @return templateModel
  **/
  @javax.annotation.Nullable
  public String getTemplateModel() {
    return templateModel;
  }


  public void setTemplateModel(String templateModel) {
    this.templateModel = templateModel;
  }


  public PostCustomDataStreamingResponse active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public PostCustomDataStreamingResponse endpoint(String endpoint) {
    
    this.endpoint = endpoint;
    return this;
  }

   /**
   * Get endpoint
   * @return endpoint
  **/
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }


  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public PostCustomDataStreamingResponse allDomains(Boolean allDomains) {
    
    this.allDomains = allDomains;
    return this;
  }

   /**
   * Note:  * Field not used with the rtm_activity data source. 
   * @return allDomains
  **/
  @javax.annotation.Nullable
  public Boolean getAllDomains() {
    return allDomains;
  }


  public void setAllDomains(Boolean allDomains) {
    this.allDomains = allDomains;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostCustomDataStreamingResponse postCustomDataStreamingResponse = (PostCustomDataStreamingResponse) o;
    return Objects.equals(this.id, postCustomDataStreamingResponse.id) &&
        Objects.equals(this.name, postCustomDataStreamingResponse.name) &&
        Objects.equals(this.dataSource, postCustomDataStreamingResponse.dataSource) &&
        Objects.equals(this.templateModel, postCustomDataStreamingResponse.templateModel) &&
        Objects.equals(this.active, postCustomDataStreamingResponse.active) &&
        Objects.equals(this.endpoint, postCustomDataStreamingResponse.endpoint) &&
        Objects.equals(this.allDomains, postCustomDataStreamingResponse.allDomains);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, dataSource, templateModel, active, endpoint, allDomains);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostCustomDataStreamingResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    templateModel: ").append(toIndentedString(templateModel)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    allDomains: ").append(toIndentedString(allDomains)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("data_source");
    openapiFields.add("template_model");
    openapiFields.add("active");
    openapiFields.add("endpoint");
    openapiFields.add("all_domains");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PostCustomDataStreamingResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PostCustomDataStreamingResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostCustomDataStreamingResponse is not found in the empty JSON string", PostCustomDataStreamingResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PostCustomDataStreamingResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostCustomDataStreamingResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("data_source") != null && !jsonObj.get("data_source").isJsonNull()) && !jsonObj.get("data_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_source").toString()));
      }
      if ((jsonObj.get("template_model") != null && !jsonObj.get("template_model").isJsonNull()) && !jsonObj.get("template_model").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_model` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_model").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostCustomDataStreamingResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostCustomDataStreamingResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostCustomDataStreamingResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostCustomDataStreamingResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PostCustomDataStreamingResponse>() {
           @Override
           public void write(JsonWriter out, PostCustomDataStreamingResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostCustomDataStreamingResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PostCustomDataStreamingResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PostCustomDataStreamingResponse
  * @throws IOException if the JSON string is invalid with respect to PostCustomDataStreamingResponse
  */
  public static PostCustomDataStreamingResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostCustomDataStreamingResponse.class);
  }

 /**
  * Convert an instance of PostCustomDataStreamingResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

