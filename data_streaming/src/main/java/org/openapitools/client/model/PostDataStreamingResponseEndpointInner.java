/*
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EndpoinrtS3;
import org.openapitools.client.model.EndpointAWSKinesisFirehose;
import org.openapitools.client.model.EndpointAzureBlobStorage;
import org.openapitools.client.model.EndpointAzureMonitor;
import org.openapitools.client.model.EndpointDatadog;
import org.openapitools.client.model.EndpointDefault;
import org.openapitools.client.model.EndpointElasticsearch;
import org.openapitools.client.model.EndpointGoogleBigQuery;
import org.openapitools.client.model.EndpointGoogleBigQueryServiceAccountKey;
import org.openapitools.client.model.EndpointIBMQRadar;
import org.openapitools.client.model.EndpointKafka;
import org.openapitools.client.model.EndpointSplunk;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-01T19:02:16.279151Z[GMT]")
public class PostDataStreamingResponseEndpointInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(PostDataStreamingResponseEndpointInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PostDataStreamingResponseEndpointInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PostDataStreamingResponseEndpointInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EndpointDefault> adapterEndpointDefault = gson.getDelegateAdapter(this, TypeToken.get(EndpointDefault.class));
            final TypeAdapter<EndpointKafka> adapterEndpointKafka = gson.getDelegateAdapter(this, TypeToken.get(EndpointKafka.class));
            final TypeAdapter<EndpoinrtS3> adapterEndpoinrtS3 = gson.getDelegateAdapter(this, TypeToken.get(EndpoinrtS3.class));
            final TypeAdapter<EndpointGoogleBigQuery> adapterEndpointGoogleBigQuery = gson.getDelegateAdapter(this, TypeToken.get(EndpointGoogleBigQuery.class));
            final TypeAdapter<EndpointElasticsearch> adapterEndpointElasticsearch = gson.getDelegateAdapter(this, TypeToken.get(EndpointElasticsearch.class));
            final TypeAdapter<EndpointAWSKinesisFirehose> adapterEndpointAWSKinesisFirehose = gson.getDelegateAdapter(this, TypeToken.get(EndpointAWSKinesisFirehose.class));
            final TypeAdapter<EndpointDatadog> adapterEndpointDatadog = gson.getDelegateAdapter(this, TypeToken.get(EndpointDatadog.class));
            final TypeAdapter<EndpointIBMQRadar> adapterEndpointIBMQRadar = gson.getDelegateAdapter(this, TypeToken.get(EndpointIBMQRadar.class));
            final TypeAdapter<EndpointAzureMonitor> adapterEndpointAzureMonitor = gson.getDelegateAdapter(this, TypeToken.get(EndpointAzureMonitor.class));
            final TypeAdapter<EndpointAzureBlobStorage> adapterEndpointAzureBlobStorage = gson.getDelegateAdapter(this, TypeToken.get(EndpointAzureBlobStorage.class));
            final TypeAdapter<EndpointSplunk> adapterEndpointSplunk = gson.getDelegateAdapter(this, TypeToken.get(EndpointSplunk.class));

            return (TypeAdapter<T>) new TypeAdapter<PostDataStreamingResponseEndpointInner>() {
                @Override
                public void write(JsonWriter out, PostDataStreamingResponseEndpointInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `EndpointDefault`
                    if (value.getActualInstance() instanceof EndpointDefault) {
                      JsonElement element = adapterEndpointDefault.toJsonTree((EndpointDefault)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EndpointKafka`
                    if (value.getActualInstance() instanceof EndpointKafka) {
                      JsonElement element = adapterEndpointKafka.toJsonTree((EndpointKafka)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EndpoinrtS3`
                    if (value.getActualInstance() instanceof EndpoinrtS3) {
                      JsonElement element = adapterEndpoinrtS3.toJsonTree((EndpoinrtS3)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EndpointGoogleBigQuery`
                    if (value.getActualInstance() instanceof EndpointGoogleBigQuery) {
                      JsonElement element = adapterEndpointGoogleBigQuery.toJsonTree((EndpointGoogleBigQuery)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EndpointElasticsearch`
                    if (value.getActualInstance() instanceof EndpointElasticsearch) {
                      JsonElement element = adapterEndpointElasticsearch.toJsonTree((EndpointElasticsearch)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EndpointAWSKinesisFirehose`
                    if (value.getActualInstance() instanceof EndpointAWSKinesisFirehose) {
                      JsonElement element = adapterEndpointAWSKinesisFirehose.toJsonTree((EndpointAWSKinesisFirehose)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EndpointDatadog`
                    if (value.getActualInstance() instanceof EndpointDatadog) {
                      JsonElement element = adapterEndpointDatadog.toJsonTree((EndpointDatadog)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EndpointIBMQRadar`
                    if (value.getActualInstance() instanceof EndpointIBMQRadar) {
                      JsonElement element = adapterEndpointIBMQRadar.toJsonTree((EndpointIBMQRadar)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EndpointAzureMonitor`
                    if (value.getActualInstance() instanceof EndpointAzureMonitor) {
                      JsonElement element = adapterEndpointAzureMonitor.toJsonTree((EndpointAzureMonitor)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EndpointAzureBlobStorage`
                    if (value.getActualInstance() instanceof EndpointAzureBlobStorage) {
                      JsonElement element = adapterEndpointAzureBlobStorage.toJsonTree((EndpointAzureBlobStorage)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EndpointSplunk`
                    if (value.getActualInstance() instanceof EndpointSplunk) {
                      JsonElement element = adapterEndpointSplunk.toJsonTree((EndpointSplunk)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: EndpoinrtS3, EndpointAWSKinesisFirehose, EndpointAzureBlobStorage, EndpointAzureMonitor, EndpointDatadog, EndpointDefault, EndpointElasticsearch, EndpointGoogleBigQuery, EndpointIBMQRadar, EndpointKafka, EndpointSplunk");
                }

                @Override
                public PostDataStreamingResponseEndpointInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize EndpointDefault
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpointDefault.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpointDefault;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpointDefault'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpointDefault failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpointDefault'", e);
                    }
                    // deserialize EndpointKafka
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpointKafka.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpointKafka;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpointKafka'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpointKafka failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpointKafka'", e);
                    }
                    // deserialize EndpoinrtS3
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpoinrtS3.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpoinrtS3;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpoinrtS3'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpoinrtS3 failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpoinrtS3'", e);
                    }
                    // deserialize EndpointGoogleBigQuery
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpointGoogleBigQuery.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpointGoogleBigQuery;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpointGoogleBigQuery'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpointGoogleBigQuery failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpointGoogleBigQuery'", e);
                    }
                    // deserialize EndpointElasticsearch
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpointElasticsearch.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpointElasticsearch;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpointElasticsearch'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpointElasticsearch failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpointElasticsearch'", e);
                    }
                    // deserialize EndpointAWSKinesisFirehose
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpointAWSKinesisFirehose.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpointAWSKinesisFirehose;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpointAWSKinesisFirehose'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpointAWSKinesisFirehose failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpointAWSKinesisFirehose'", e);
                    }
                    // deserialize EndpointDatadog
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpointDatadog.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpointDatadog;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpointDatadog'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpointDatadog failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpointDatadog'", e);
                    }
                    // deserialize EndpointIBMQRadar
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpointIBMQRadar.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpointIBMQRadar;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpointIBMQRadar'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpointIBMQRadar failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpointIBMQRadar'", e);
                    }
                    // deserialize EndpointAzureMonitor
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpointAzureMonitor.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpointAzureMonitor;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpointAzureMonitor'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpointAzureMonitor failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpointAzureMonitor'", e);
                    }
                    // deserialize EndpointAzureBlobStorage
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpointAzureBlobStorage.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpointAzureBlobStorage;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpointAzureBlobStorage'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpointAzureBlobStorage failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpointAzureBlobStorage'", e);
                    }
                    // deserialize EndpointSplunk
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EndpointSplunk.validateJsonElement(jsonElement);
                      actualAdapter = adapterEndpointSplunk;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EndpointSplunk'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EndpointSplunk failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EndpointSplunk'", e);
                    }

                    if (match == 1) {
                        PostDataStreamingResponseEndpointInner ret = new PostDataStreamingResponseEndpointInner();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for PostDataStreamingResponseEndpointInner: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public PostDataStreamingResponseEndpointInner() {
        super("oneOf", Boolean.FALSE);
    }

    public PostDataStreamingResponseEndpointInner(EndpoinrtS3 o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PostDataStreamingResponseEndpointInner(EndpointAWSKinesisFirehose o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PostDataStreamingResponseEndpointInner(EndpointAzureBlobStorage o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PostDataStreamingResponseEndpointInner(EndpointAzureMonitor o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PostDataStreamingResponseEndpointInner(EndpointDatadog o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PostDataStreamingResponseEndpointInner(EndpointDefault o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PostDataStreamingResponseEndpointInner(EndpointElasticsearch o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PostDataStreamingResponseEndpointInner(EndpointGoogleBigQuery o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PostDataStreamingResponseEndpointInner(EndpointIBMQRadar o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PostDataStreamingResponseEndpointInner(EndpointKafka o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public PostDataStreamingResponseEndpointInner(EndpointSplunk o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("EndpointDefault", EndpointDefault.class);
        schemas.put("EndpointKafka", EndpointKafka.class);
        schemas.put("EndpoinrtS3", EndpoinrtS3.class);
        schemas.put("EndpointGoogleBigQuery", EndpointGoogleBigQuery.class);
        schemas.put("EndpointElasticsearch", EndpointElasticsearch.class);
        schemas.put("EndpointAWSKinesisFirehose", EndpointAWSKinesisFirehose.class);
        schemas.put("EndpointDatadog", EndpointDatadog.class);
        schemas.put("EndpointIBMQRadar", EndpointIBMQRadar.class);
        schemas.put("EndpointAzureMonitor", EndpointAzureMonitor.class);
        schemas.put("EndpointAzureBlobStorage", EndpointAzureBlobStorage.class);
        schemas.put("EndpointSplunk", EndpointSplunk.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return PostDataStreamingResponseEndpointInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * EndpoinrtS3, EndpointAWSKinesisFirehose, EndpointAzureBlobStorage, EndpointAzureMonitor, EndpointDatadog, EndpointDefault, EndpointElasticsearch, EndpointGoogleBigQuery, EndpointIBMQRadar, EndpointKafka, EndpointSplunk
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof EndpointDefault) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndpointKafka) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndpoinrtS3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndpointGoogleBigQuery) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndpointElasticsearch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndpointAWSKinesisFirehose) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndpointDatadog) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndpointIBMQRadar) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndpointAzureMonitor) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndpointAzureBlobStorage) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EndpointSplunk) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be EndpoinrtS3, EndpointAWSKinesisFirehose, EndpointAzureBlobStorage, EndpointAzureMonitor, EndpointDatadog, EndpointDefault, EndpointElasticsearch, EndpointGoogleBigQuery, EndpointIBMQRadar, EndpointKafka, EndpointSplunk");
    }

    /**
     * Get the actual instance, which can be the following:
     * EndpoinrtS3, EndpointAWSKinesisFirehose, EndpointAzureBlobStorage, EndpointAzureMonitor, EndpointDatadog, EndpointDefault, EndpointElasticsearch, EndpointGoogleBigQuery, EndpointIBMQRadar, EndpointKafka, EndpointSplunk
     *
     * @return The actual instance (EndpoinrtS3, EndpointAWSKinesisFirehose, EndpointAzureBlobStorage, EndpointAzureMonitor, EndpointDatadog, EndpointDefault, EndpointElasticsearch, EndpointGoogleBigQuery, EndpointIBMQRadar, EndpointKafka, EndpointSplunk)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `EndpointDefault`. If the actual instance is not `EndpointDefault`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpointDefault`
     * @throws ClassCastException if the instance is not `EndpointDefault`
     */
    public EndpointDefault getEndpointDefault() throws ClassCastException {
        return (EndpointDefault)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndpointKafka`. If the actual instance is not `EndpointKafka`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpointKafka`
     * @throws ClassCastException if the instance is not `EndpointKafka`
     */
    public EndpointKafka getEndpointKafka() throws ClassCastException {
        return (EndpointKafka)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndpoinrtS3`. If the actual instance is not `EndpoinrtS3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpoinrtS3`
     * @throws ClassCastException if the instance is not `EndpoinrtS3`
     */
    public EndpoinrtS3 getEndpoinrtS3() throws ClassCastException {
        return (EndpoinrtS3)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndpointGoogleBigQuery`. If the actual instance is not `EndpointGoogleBigQuery`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpointGoogleBigQuery`
     * @throws ClassCastException if the instance is not `EndpointGoogleBigQuery`
     */
    public EndpointGoogleBigQuery getEndpointGoogleBigQuery() throws ClassCastException {
        return (EndpointGoogleBigQuery)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndpointElasticsearch`. If the actual instance is not `EndpointElasticsearch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpointElasticsearch`
     * @throws ClassCastException if the instance is not `EndpointElasticsearch`
     */
    public EndpointElasticsearch getEndpointElasticsearch() throws ClassCastException {
        return (EndpointElasticsearch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndpointAWSKinesisFirehose`. If the actual instance is not `EndpointAWSKinesisFirehose`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpointAWSKinesisFirehose`
     * @throws ClassCastException if the instance is not `EndpointAWSKinesisFirehose`
     */
    public EndpointAWSKinesisFirehose getEndpointAWSKinesisFirehose() throws ClassCastException {
        return (EndpointAWSKinesisFirehose)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndpointDatadog`. If the actual instance is not `EndpointDatadog`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpointDatadog`
     * @throws ClassCastException if the instance is not `EndpointDatadog`
     */
    public EndpointDatadog getEndpointDatadog() throws ClassCastException {
        return (EndpointDatadog)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndpointIBMQRadar`. If the actual instance is not `EndpointIBMQRadar`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpointIBMQRadar`
     * @throws ClassCastException if the instance is not `EndpointIBMQRadar`
     */
    public EndpointIBMQRadar getEndpointIBMQRadar() throws ClassCastException {
        return (EndpointIBMQRadar)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndpointAzureMonitor`. If the actual instance is not `EndpointAzureMonitor`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpointAzureMonitor`
     * @throws ClassCastException if the instance is not `EndpointAzureMonitor`
     */
    public EndpointAzureMonitor getEndpointAzureMonitor() throws ClassCastException {
        return (EndpointAzureMonitor)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndpointAzureBlobStorage`. If the actual instance is not `EndpointAzureBlobStorage`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpointAzureBlobStorage`
     * @throws ClassCastException if the instance is not `EndpointAzureBlobStorage`
     */
    public EndpointAzureBlobStorage getEndpointAzureBlobStorage() throws ClassCastException {
        return (EndpointAzureBlobStorage)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EndpointSplunk`. If the actual instance is not `EndpointSplunk`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EndpointSplunk`
     * @throws ClassCastException if the instance is not `EndpointSplunk`
     */
    public EndpointSplunk getEndpointSplunk() throws ClassCastException {
        return (EndpointSplunk)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PostDataStreamingResponseEndpointInner
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with EndpointDefault
    try {
      EndpointDefault.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpointDefault failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndpointKafka
    try {
      EndpointKafka.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpointKafka failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndpoinrtS3
    try {
      EndpoinrtS3.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpoinrtS3 failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndpointGoogleBigQuery
    try {
      EndpointGoogleBigQuery.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpointGoogleBigQuery failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndpointElasticsearch
    try {
      EndpointElasticsearch.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpointElasticsearch failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndpointAWSKinesisFirehose
    try {
      EndpointAWSKinesisFirehose.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpointAWSKinesisFirehose failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndpointDatadog
    try {
      EndpointDatadog.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpointDatadog failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndpointIBMQRadar
    try {
      EndpointIBMQRadar.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpointIBMQRadar failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndpointAzureMonitor
    try {
      EndpointAzureMonitor.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpointAzureMonitor failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndpointAzureBlobStorage
    try {
      EndpointAzureBlobStorage.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpointAzureBlobStorage failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EndpointSplunk
    try {
      EndpointSplunk.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EndpointSplunk failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for PostDataStreamingResponseEndpointInner with oneOf schemas: EndpoinrtS3, EndpointAWSKinesisFirehose, EndpointAzureBlobStorage, EndpointAzureMonitor, EndpointDatadog, EndpointDefault, EndpointElasticsearch, EndpointGoogleBigQuery, EndpointIBMQRadar, EndpointKafka, EndpointSplunk. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of PostDataStreamingResponseEndpointInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PostDataStreamingResponseEndpointInner
  * @throws IOException if the JSON string is invalid with respect to PostDataStreamingResponseEndpointInner
  */
  public static PostDataStreamingResponseEndpointInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostDataStreamingResponseEndpointInner.class);
  }

 /**
  * Convert an instance of PostDataStreamingResponseEndpointInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

