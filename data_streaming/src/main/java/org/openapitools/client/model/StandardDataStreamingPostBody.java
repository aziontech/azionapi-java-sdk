/*
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataStreamingEndpointTypeStandard;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StandardDataStreamingPostBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-01T19:02:16.279151Z[GMT]")
public class StandardDataStreamingPostBody {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Options:  * &#x60;2&#x60; - Edge Applications Event Collector  * &#x60;4&#x60; - WAF Event Collector  * &#x60;86&#x60; - Edge Functions Event Collector  * &#x60;184&#x60; - Edge Applications + WAF Event Collector  * &#x60;251&#x60; - Activity History Collector 
   */
  @JsonAdapter(TemplateIdEnum.Adapter.class)
  public enum TemplateIdEnum {
    NUMBER_2(2),
    
    NUMBER_4(4),
    
    NUMBER_86(86),
    
    NUMBER_184(184),
    
    NUMBER_251(251);

    private Integer value;

    TemplateIdEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TemplateIdEnum fromValue(Integer value) {
      for (TemplateIdEnum b : TemplateIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TemplateIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TemplateIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TemplateIdEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TemplateIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private TemplateIdEnum templateId;

  /**
   * Options:  * &#x60;http&#x60; - Edge Applications (default)  * &#x60;waf&#x60; - WAF Events  * &#x60;cells_console&#x60; - Edge Functions  * &#x60;rtm_activity&#x60; - Activity History 
   */
  @JsonAdapter(DataSourceEnum.Adapter.class)
  public enum DataSourceEnum {
    HTTP("http"),
    
    WAF("waf"),
    
    CELLS_CONSOLE("cells_console"),
    
    RTM_ACTIVITY("rtm_activity");

    private String value;

    DataSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataSourceEnum fromValue(String value) {
      for (DataSourceEnum b : DataSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DataSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataSourceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DATA_SOURCE = "data_source";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE)
  private DataSourceEnum dataSource;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private DataStreamingEndpointTypeStandard endpoint;

  public static final String SERIALIZED_NAME_DOMAINS_IDS = "domains_ids";
  @SerializedName(SERIALIZED_NAME_DOMAINS_IDS)
  private List<Integer> domainsIds;

  public static final String SERIALIZED_NAME_ALL_DOMAINS = "all_domains";
  @SerializedName(SERIALIZED_NAME_ALL_DOMAINS)
  private Boolean allDomains = false;

  public StandardDataStreamingPostBody() {
  }

  public StandardDataStreamingPostBody name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public StandardDataStreamingPostBody templateId(TemplateIdEnum templateId) {
    
    this.templateId = templateId;
    return this;
  }

   /**
   * Options:  * &#x60;2&#x60; - Edge Applications Event Collector  * &#x60;4&#x60; - WAF Event Collector  * &#x60;86&#x60; - Edge Functions Event Collector  * &#x60;184&#x60; - Edge Applications + WAF Event Collector  * &#x60;251&#x60; - Activity History Collector 
   * @return templateId
  **/
  @javax.annotation.Nullable
  public TemplateIdEnum getTemplateId() {
    return templateId;
  }


  public void setTemplateId(TemplateIdEnum templateId) {
    this.templateId = templateId;
  }


  public StandardDataStreamingPostBody dataSource(DataSourceEnum dataSource) {
    
    this.dataSource = dataSource;
    return this;
  }

   /**
   * Options:  * &#x60;http&#x60; - Edge Applications (default)  * &#x60;waf&#x60; - WAF Events  * &#x60;cells_console&#x60; - Edge Functions  * &#x60;rtm_activity&#x60; - Activity History 
   * @return dataSource
  **/
  @javax.annotation.Nullable
  public DataSourceEnum getDataSource() {
    return dataSource;
  }


  public void setDataSource(DataSourceEnum dataSource) {
    this.dataSource = dataSource;
  }


  public StandardDataStreamingPostBody active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public StandardDataStreamingPostBody endpoint(DataStreamingEndpointTypeStandard endpoint) {
    
    this.endpoint = endpoint;
    return this;
  }

   /**
   * Get endpoint
   * @return endpoint
  **/
  @javax.annotation.Nullable
  public DataStreamingEndpointTypeStandard getEndpoint() {
    return endpoint;
  }


  public void setEndpoint(DataStreamingEndpointTypeStandard endpoint) {
    this.endpoint = endpoint;
  }


  public StandardDataStreamingPostBody domainsIds(List<Integer> domainsIds) {
    
    this.domainsIds = domainsIds;
    return this;
  }

  public StandardDataStreamingPostBody addDomainsIdsItem(Integer domainsIdsItem) {
    if (this.domainsIds == null) {
      this.domainsIds = new ArrayList<>();
    }
    this.domainsIds.add(domainsIdsItem);
    return this;
  }

   /**
   * Note:  * Field not used with the rtm_activity data source. 
   * @return domainsIds
  **/
  @javax.annotation.Nullable
  public List<Integer> getDomainsIds() {
    return domainsIds;
  }


  public void setDomainsIds(List<Integer> domainsIds) {
    this.domainsIds = domainsIds;
  }


  public StandardDataStreamingPostBody allDomains(Boolean allDomains) {
    
    this.allDomains = allDomains;
    return this;
  }

   /**
   * Note:  * Field not used with the rtm_activity data source. 
   * @return allDomains
  **/
  @javax.annotation.Nullable
  public Boolean getAllDomains() {
    return allDomains;
  }


  public void setAllDomains(Boolean allDomains) {
    this.allDomains = allDomains;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StandardDataStreamingPostBody standardDataStreamingPostBody = (StandardDataStreamingPostBody) o;
    return Objects.equals(this.name, standardDataStreamingPostBody.name) &&
        Objects.equals(this.templateId, standardDataStreamingPostBody.templateId) &&
        Objects.equals(this.dataSource, standardDataStreamingPostBody.dataSource) &&
        Objects.equals(this.active, standardDataStreamingPostBody.active) &&
        Objects.equals(this.endpoint, standardDataStreamingPostBody.endpoint) &&
        Objects.equals(this.domainsIds, standardDataStreamingPostBody.domainsIds) &&
        Objects.equals(this.allDomains, standardDataStreamingPostBody.allDomains);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, templateId, dataSource, active, endpoint, domainsIds, allDomains);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StandardDataStreamingPostBody {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    dataSource: ").append(toIndentedString(dataSource)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    domainsIds: ").append(toIndentedString(domainsIds)).append("\n");
    sb.append("    allDomains: ").append(toIndentedString(allDomains)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("template_id");
    openapiFields.add("data_source");
    openapiFields.add("active");
    openapiFields.add("endpoint");
    openapiFields.add("domains_ids");
    openapiFields.add("all_domains");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StandardDataStreamingPostBody
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StandardDataStreamingPostBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StandardDataStreamingPostBody is not found in the empty JSON string", StandardDataStreamingPostBody.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!StandardDataStreamingPostBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StandardDataStreamingPostBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("data_source") != null && !jsonObj.get("data_source").isJsonNull()) && !jsonObj.get("data_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_source").toString()));
      }
      // validate the optional field `endpoint`
      if (jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) {
        DataStreamingEndpointTypeStandard.validateJsonElement(jsonObj.get("endpoint"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("domains_ids") != null && !jsonObj.get("domains_ids").isJsonNull() && !jsonObj.get("domains_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domains_ids` to be an array in the JSON string but got `%s`", jsonObj.get("domains_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StandardDataStreamingPostBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StandardDataStreamingPostBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StandardDataStreamingPostBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StandardDataStreamingPostBody.class));

       return (TypeAdapter<T>) new TypeAdapter<StandardDataStreamingPostBody>() {
           @Override
           public void write(JsonWriter out, StandardDataStreamingPostBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StandardDataStreamingPostBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StandardDataStreamingPostBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StandardDataStreamingPostBody
  * @throws IOException if the JSON string is invalid with respect to StandardDataStreamingPostBody
  */
  public static StandardDataStreamingPostBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StandardDataStreamingPostBody.class);
  }

 /**
  * Convert an instance of StandardDataStreamingPostBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

