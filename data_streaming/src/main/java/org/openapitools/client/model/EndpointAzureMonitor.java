/*
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EndpointAzureMonitor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-22T12:30:18.138783Z[GMT]")
public class EndpointAzureMonitor {
  public static final String SERIALIZED_NAME_ENDPOINT_TYPE = "endpoint_type";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_TYPE)
  private String endpointType;

  public static final String SERIALIZED_NAME_LOG_TYPE = "log_type";
  @SerializedName(SERIALIZED_NAME_LOG_TYPE)
  private String logType;

  public static final String SERIALIZED_NAME_SHARED_KEY = "shared_key";
  @SerializedName(SERIALIZED_NAME_SHARED_KEY)
  private String sharedKey;

  public static final String SERIALIZED_NAME_TIME_GENERATED_FIELD = "time_generated_field";
  @SerializedName(SERIALIZED_NAME_TIME_GENERATED_FIELD)
  private String timeGeneratedField;

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspace_id";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public EndpointAzureMonitor() {
  }

  public EndpointAzureMonitor endpointType(String endpointType) {
    
    this.endpointType = endpointType;
    return this;
  }

   /**
   * Get endpointType
   * @return endpointType
  **/
  @javax.annotation.Nullable
  public String getEndpointType() {
    return endpointType;
  }


  public void setEndpointType(String endpointType) {
    this.endpointType = endpointType;
  }


  public EndpointAzureMonitor logType(String logType) {
    
    this.logType = logType;
    return this;
  }

   /**
   * Get logType
   * @return logType
  **/
  @javax.annotation.Nullable
  public String getLogType() {
    return logType;
  }


  public void setLogType(String logType) {
    this.logType = logType;
  }


  public EndpointAzureMonitor sharedKey(String sharedKey) {
    
    this.sharedKey = sharedKey;
    return this;
  }

   /**
   * Get sharedKey
   * @return sharedKey
  **/
  @javax.annotation.Nullable
  public String getSharedKey() {
    return sharedKey;
  }


  public void setSharedKey(String sharedKey) {
    this.sharedKey = sharedKey;
  }


  public EndpointAzureMonitor timeGeneratedField(String timeGeneratedField) {
    
    this.timeGeneratedField = timeGeneratedField;
    return this;
  }

   /**
   * Get timeGeneratedField
   * @return timeGeneratedField
  **/
  @javax.annotation.Nullable
  public String getTimeGeneratedField() {
    return timeGeneratedField;
  }


  public void setTimeGeneratedField(String timeGeneratedField) {
    this.timeGeneratedField = timeGeneratedField;
  }


  public EndpointAzureMonitor workspaceId(String workspaceId) {
    
    this.workspaceId = workspaceId;
    return this;
  }

   /**
   * Get workspaceId
   * @return workspaceId
  **/
  @javax.annotation.Nullable
  public String getWorkspaceId() {
    return workspaceId;
  }


  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointAzureMonitor endpointAzureMonitor = (EndpointAzureMonitor) o;
    return Objects.equals(this.endpointType, endpointAzureMonitor.endpointType) &&
        Objects.equals(this.logType, endpointAzureMonitor.logType) &&
        Objects.equals(this.sharedKey, endpointAzureMonitor.sharedKey) &&
        Objects.equals(this.timeGeneratedField, endpointAzureMonitor.timeGeneratedField) &&
        Objects.equals(this.workspaceId, endpointAzureMonitor.workspaceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpointType, logType, sharedKey, timeGeneratedField, workspaceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointAzureMonitor {\n");
    sb.append("    endpointType: ").append(toIndentedString(endpointType)).append("\n");
    sb.append("    logType: ").append(toIndentedString(logType)).append("\n");
    sb.append("    sharedKey: ").append(toIndentedString(sharedKey)).append("\n");
    sb.append("    timeGeneratedField: ").append(toIndentedString(timeGeneratedField)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpoint_type");
    openapiFields.add("log_type");
    openapiFields.add("shared_key");
    openapiFields.add("time_generated_field");
    openapiFields.add("workspace_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EndpointAzureMonitor
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EndpointAzureMonitor.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointAzureMonitor is not found in the empty JSON string", EndpointAzureMonitor.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EndpointAzureMonitor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointAzureMonitor` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("endpoint_type") != null && !jsonObj.get("endpoint_type").isJsonNull()) && !jsonObj.get("endpoint_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint_type").toString()));
      }
      if ((jsonObj.get("log_type") != null && !jsonObj.get("log_type").isJsonNull()) && !jsonObj.get("log_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `log_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("log_type").toString()));
      }
      if ((jsonObj.get("shared_key") != null && !jsonObj.get("shared_key").isJsonNull()) && !jsonObj.get("shared_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared_key").toString()));
      }
      if ((jsonObj.get("time_generated_field") != null && !jsonObj.get("time_generated_field").isJsonNull()) && !jsonObj.get("time_generated_field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_generated_field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_generated_field").toString()));
      }
      if ((jsonObj.get("workspace_id") != null && !jsonObj.get("workspace_id").isJsonNull()) && !jsonObj.get("workspace_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspace_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspace_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointAzureMonitor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointAzureMonitor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointAzureMonitor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointAzureMonitor.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointAzureMonitor>() {
           @Override
           public void write(JsonWriter out, EndpointAzureMonitor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointAzureMonitor read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EndpointAzureMonitor given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EndpointAzureMonitor
  * @throws IOException if the JSON string is invalid with respect to EndpointAzureMonitor
  */
  public static EndpointAzureMonitor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointAzureMonitor.class);
  }

 /**
  * Convert an instance of EndpointAzureMonitor to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

