/*
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EndpointGoogleBigQueryServiceAccountKey
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-01T19:02:16.279151Z[GMT]")
public class EndpointGoogleBigQueryServiceAccountKey {
  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_KEY = "service_account_key";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_KEY)
  private String serviceAccountKey;

  public EndpointGoogleBigQueryServiceAccountKey() {
  }

  public EndpointGoogleBigQueryServiceAccountKey serviceAccountKey(String serviceAccountKey) {
    
    this.serviceAccountKey = serviceAccountKey;
    return this;
  }

   /**
   * Get serviceAccountKey
   * @return serviceAccountKey
  **/
  @javax.annotation.Nullable
  public String getServiceAccountKey() {
    return serviceAccountKey;
  }


  public void setServiceAccountKey(String serviceAccountKey) {
    this.serviceAccountKey = serviceAccountKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointGoogleBigQueryServiceAccountKey endpointGoogleBigQueryServiceAccountKey = (EndpointGoogleBigQueryServiceAccountKey) o;
    return Objects.equals(this.serviceAccountKey, endpointGoogleBigQueryServiceAccountKey.serviceAccountKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceAccountKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointGoogleBigQueryServiceAccountKey {\n");
    sb.append("    serviceAccountKey: ").append(toIndentedString(serviceAccountKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("service_account_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EndpointGoogleBigQueryServiceAccountKey
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EndpointGoogleBigQueryServiceAccountKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EndpointGoogleBigQueryServiceAccountKey is not found in the empty JSON string", EndpointGoogleBigQueryServiceAccountKey.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EndpointGoogleBigQueryServiceAccountKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EndpointGoogleBigQueryServiceAccountKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("service_account_key") != null && !jsonObj.get("service_account_key").isJsonNull()) && !jsonObj.get("service_account_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_account_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_account_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EndpointGoogleBigQueryServiceAccountKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EndpointGoogleBigQueryServiceAccountKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EndpointGoogleBigQueryServiceAccountKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EndpointGoogleBigQueryServiceAccountKey.class));

       return (TypeAdapter<T>) new TypeAdapter<EndpointGoogleBigQueryServiceAccountKey>() {
           @Override
           public void write(JsonWriter out, EndpointGoogleBigQueryServiceAccountKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EndpointGoogleBigQueryServiceAccountKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EndpointGoogleBigQueryServiceAccountKey given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EndpointGoogleBigQueryServiceAccountKey
  * @throws IOException if the JSON string is invalid with respect to EndpointGoogleBigQueryServiceAccountKey
  */
  public static EndpointGoogleBigQueryServiceAccountKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EndpointGoogleBigQueryServiceAccountKey.class);
  }

 /**
  * Convert an instance of EndpointGoogleBigQueryServiceAccountKey to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

