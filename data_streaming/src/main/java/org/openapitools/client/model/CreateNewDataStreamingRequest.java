/*
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomDataStreamingPostBody;
import org.openapitools.client.model.DataStreamingEndpointTypeStandard;
import org.openapitools.client.model.DataStreamingPostBody;
import org.openapitools.client.model.StandardDataStreamingPostBody;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-09-01T19:02:16.279151Z[GMT]")
public class CreateNewDataStreamingRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(CreateNewDataStreamingRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CreateNewDataStreamingRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CreateNewDataStreamingRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DataStreamingPostBody> adapterDataStreamingPostBody = gson.getDelegateAdapter(this, TypeToken.get(DataStreamingPostBody.class));
            final TypeAdapter<StandardDataStreamingPostBody> adapterStandardDataStreamingPostBody = gson.getDelegateAdapter(this, TypeToken.get(StandardDataStreamingPostBody.class));
            final TypeAdapter<CustomDataStreamingPostBody> adapterCustomDataStreamingPostBody = gson.getDelegateAdapter(this, TypeToken.get(CustomDataStreamingPostBody.class));

            return (TypeAdapter<T>) new TypeAdapter<CreateNewDataStreamingRequest>() {
                @Override
                public void write(JsonWriter out, CreateNewDataStreamingRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `DataStreamingPostBody`
                    if (value.getActualInstance() instanceof DataStreamingPostBody) {
                      JsonElement element = adapterDataStreamingPostBody.toJsonTree((DataStreamingPostBody)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `StandardDataStreamingPostBody`
                    if (value.getActualInstance() instanceof StandardDataStreamingPostBody) {
                      JsonElement element = adapterStandardDataStreamingPostBody.toJsonTree((StandardDataStreamingPostBody)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `CustomDataStreamingPostBody`
                    if (value.getActualInstance() instanceof CustomDataStreamingPostBody) {
                      JsonElement element = adapterCustomDataStreamingPostBody.toJsonTree((CustomDataStreamingPostBody)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CustomDataStreamingPostBody, DataStreamingPostBody, StandardDataStreamingPostBody");
                }

                @Override
                public CreateNewDataStreamingRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize DataStreamingPostBody
                    try {
                      // validate the JSON object to see if any exception is thrown
                      DataStreamingPostBody.validateJsonElement(jsonElement);
                      actualAdapter = adapterDataStreamingPostBody;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'DataStreamingPostBody'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for DataStreamingPostBody failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'DataStreamingPostBody'", e);
                    }
                    // deserialize StandardDataStreamingPostBody
                    try {
                      // validate the JSON object to see if any exception is thrown
                      StandardDataStreamingPostBody.validateJsonElement(jsonElement);
                      actualAdapter = adapterStandardDataStreamingPostBody;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'StandardDataStreamingPostBody'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for StandardDataStreamingPostBody failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'StandardDataStreamingPostBody'", e);
                    }
                    // deserialize CustomDataStreamingPostBody
                    try {
                      // validate the JSON object to see if any exception is thrown
                      CustomDataStreamingPostBody.validateJsonElement(jsonElement);
                      actualAdapter = adapterCustomDataStreamingPostBody;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'CustomDataStreamingPostBody'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for CustomDataStreamingPostBody failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'CustomDataStreamingPostBody'", e);
                    }

                    if (match == 1) {
                        CreateNewDataStreamingRequest ret = new CreateNewDataStreamingRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for CreateNewDataStreamingRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public CreateNewDataStreamingRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public CreateNewDataStreamingRequest(CustomDataStreamingPostBody o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateNewDataStreamingRequest(DataStreamingPostBody o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public CreateNewDataStreamingRequest(StandardDataStreamingPostBody o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("DataStreamingPostBody", DataStreamingPostBody.class);
        schemas.put("StandardDataStreamingPostBody", StandardDataStreamingPostBody.class);
        schemas.put("CustomDataStreamingPostBody", CustomDataStreamingPostBody.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return CreateNewDataStreamingRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CustomDataStreamingPostBody, DataStreamingPostBody, StandardDataStreamingPostBody
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof DataStreamingPostBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StandardDataStreamingPostBody) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CustomDataStreamingPostBody) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CustomDataStreamingPostBody, DataStreamingPostBody, StandardDataStreamingPostBody");
    }

    /**
     * Get the actual instance, which can be the following:
     * CustomDataStreamingPostBody, DataStreamingPostBody, StandardDataStreamingPostBody
     *
     * @return The actual instance (CustomDataStreamingPostBody, DataStreamingPostBody, StandardDataStreamingPostBody)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `DataStreamingPostBody`. If the actual instance is not `DataStreamingPostBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DataStreamingPostBody`
     * @throws ClassCastException if the instance is not `DataStreamingPostBody`
     */
    public DataStreamingPostBody getDataStreamingPostBody() throws ClassCastException {
        return (DataStreamingPostBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `StandardDataStreamingPostBody`. If the actual instance is not `StandardDataStreamingPostBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StandardDataStreamingPostBody`
     * @throws ClassCastException if the instance is not `StandardDataStreamingPostBody`
     */
    public StandardDataStreamingPostBody getStandardDataStreamingPostBody() throws ClassCastException {
        return (StandardDataStreamingPostBody)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CustomDataStreamingPostBody`. If the actual instance is not `CustomDataStreamingPostBody`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CustomDataStreamingPostBody`
     * @throws ClassCastException if the instance is not `CustomDataStreamingPostBody`
     */
    public CustomDataStreamingPostBody getCustomDataStreamingPostBody() throws ClassCastException {
        return (CustomDataStreamingPostBody)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CreateNewDataStreamingRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with DataStreamingPostBody
    try {
      DataStreamingPostBody.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for DataStreamingPostBody failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with StandardDataStreamingPostBody
    try {
      StandardDataStreamingPostBody.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for StandardDataStreamingPostBody failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with CustomDataStreamingPostBody
    try {
      CustomDataStreamingPostBody.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for CustomDataStreamingPostBody failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for CreateNewDataStreamingRequest with oneOf schemas: CustomDataStreamingPostBody, DataStreamingPostBody, StandardDataStreamingPostBody. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of CreateNewDataStreamingRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateNewDataStreamingRequest
  * @throws IOException if the JSON string is invalid with respect to CreateNewDataStreamingRequest
  */
  public static CreateNewDataStreamingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNewDataStreamingRequest.class);
  }

 /**
  * Convert an instance of CreateNewDataStreamingRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

