/*
 * Data Streaming - OpenAPI
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataStreamingEndpointTypeStandardHeadersExample
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-22T12:30:18.138783Z[GMT]")
public class DataStreamingEndpointTypeStandardHeadersExample {
  public static final String SERIALIZED_NAME_HEADER_NAME1 = "header-name-1";
  @SerializedName(SERIALIZED_NAME_HEADER_NAME1)
  private String headerName1;

  public static final String SERIALIZED_NAME_HEADER_NAME2 = "header-name-2";
  @SerializedName(SERIALIZED_NAME_HEADER_NAME2)
  private String headerName2;

  public static final String SERIALIZED_NAME_HEADER_NAME3 = "header-name-3";
  @SerializedName(SERIALIZED_NAME_HEADER_NAME3)
  private String headerName3;

  public DataStreamingEndpointTypeStandardHeadersExample() {
  }

  public DataStreamingEndpointTypeStandardHeadersExample headerName1(String headerName1) {
    
    this.headerName1 = headerName1;
    return this;
  }

   /**
   * Get headerName1
   * @return headerName1
  **/
  @javax.annotation.Nullable
  public String getHeaderName1() {
    return headerName1;
  }


  public void setHeaderName1(String headerName1) {
    this.headerName1 = headerName1;
  }


  public DataStreamingEndpointTypeStandardHeadersExample headerName2(String headerName2) {
    
    this.headerName2 = headerName2;
    return this;
  }

   /**
   * Get headerName2
   * @return headerName2
  **/
  @javax.annotation.Nullable
  public String getHeaderName2() {
    return headerName2;
  }


  public void setHeaderName2(String headerName2) {
    this.headerName2 = headerName2;
  }


  public DataStreamingEndpointTypeStandardHeadersExample headerName3(String headerName3) {
    
    this.headerName3 = headerName3;
    return this;
  }

   /**
   * Get headerName3
   * @return headerName3
  **/
  @javax.annotation.Nullable
  public String getHeaderName3() {
    return headerName3;
  }


  public void setHeaderName3(String headerName3) {
    this.headerName3 = headerName3;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataStreamingEndpointTypeStandardHeadersExample dataStreamingEndpointTypeStandardHeadersExample = (DataStreamingEndpointTypeStandardHeadersExample) o;
    return Objects.equals(this.headerName1, dataStreamingEndpointTypeStandardHeadersExample.headerName1) &&
        Objects.equals(this.headerName2, dataStreamingEndpointTypeStandardHeadersExample.headerName2) &&
        Objects.equals(this.headerName3, dataStreamingEndpointTypeStandardHeadersExample.headerName3);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(headerName1, headerName2, headerName3);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataStreamingEndpointTypeStandardHeadersExample {\n");
    sb.append("    headerName1: ").append(toIndentedString(headerName1)).append("\n");
    sb.append("    headerName2: ").append(toIndentedString(headerName2)).append("\n");
    sb.append("    headerName3: ").append(toIndentedString(headerName3)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header-name-1");
    openapiFields.add("header-name-2");
    openapiFields.add("header-name-3");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DataStreamingEndpointTypeStandardHeadersExample
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DataStreamingEndpointTypeStandardHeadersExample.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataStreamingEndpointTypeStandardHeadersExample is not found in the empty JSON string", DataStreamingEndpointTypeStandardHeadersExample.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DataStreamingEndpointTypeStandardHeadersExample.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataStreamingEndpointTypeStandardHeadersExample` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("header-name-1") != null && !jsonObj.get("header-name-1").isJsonNull()) && !jsonObj.get("header-name-1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header-name-1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header-name-1").toString()));
      }
      if ((jsonObj.get("header-name-2") != null && !jsonObj.get("header-name-2").isJsonNull()) && !jsonObj.get("header-name-2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header-name-2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header-name-2").toString()));
      }
      if ((jsonObj.get("header-name-3") != null && !jsonObj.get("header-name-3").isJsonNull()) && !jsonObj.get("header-name-3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header-name-3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header-name-3").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataStreamingEndpointTypeStandardHeadersExample.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataStreamingEndpointTypeStandardHeadersExample' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataStreamingEndpointTypeStandardHeadersExample> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataStreamingEndpointTypeStandardHeadersExample.class));

       return (TypeAdapter<T>) new TypeAdapter<DataStreamingEndpointTypeStandardHeadersExample>() {
           @Override
           public void write(JsonWriter out, DataStreamingEndpointTypeStandardHeadersExample value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataStreamingEndpointTypeStandardHeadersExample read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataStreamingEndpointTypeStandardHeadersExample given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataStreamingEndpointTypeStandardHeadersExample
  * @throws IOException if the JSON string is invalid with respect to DataStreamingEndpointTypeStandardHeadersExample
  */
  public static DataStreamingEndpointTypeStandardHeadersExample fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataStreamingEndpointTypeStandardHeadersExample.class);
  }

 /**
  * Convert an instance of DataStreamingEndpointTypeStandardHeadersExample to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

