/*
 * Intelligent DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import org.openapitools.client.model.DnsSecDelegationSignerDigestType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DnsSecDelegationSigner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-02T18:57:15.513698Z[GMT]")
public class DnsSecDelegationSigner {
  public static final String SERIALIZED_NAME_DIGEST_TYPE = "digest_type";
  @SerializedName(SERIALIZED_NAME_DIGEST_TYPE)
  private DnsSecDelegationSignerDigestType digestType;

  public static final String SERIALIZED_NAME_ALGORITHM_TYPE = "algorithm_type";
  @SerializedName(SERIALIZED_NAME_ALGORITHM_TYPE)
  private DnsSecDelegationSignerDigestType algorithmType;

  public static final String SERIALIZED_NAME_DIGEST = "digest";
  @SerializedName(SERIALIZED_NAME_DIGEST)
  private String digest;

  public static final String SERIALIZED_NAME_KEY_TAG = "key_tag";
  @SerializedName(SERIALIZED_NAME_KEY_TAG)
  private Integer keyTag;

  public DnsSecDelegationSigner() {
  }

  public DnsSecDelegationSigner digestType(DnsSecDelegationSignerDigestType digestType) {
    
    this.digestType = digestType;
    return this;
  }

   /**
   * Get digestType
   * @return digestType
  **/
  @javax.annotation.Nullable
  public DnsSecDelegationSignerDigestType getDigestType() {
    return digestType;
  }


  public void setDigestType(DnsSecDelegationSignerDigestType digestType) {
    this.digestType = digestType;
  }


  public DnsSecDelegationSigner algorithmType(DnsSecDelegationSignerDigestType algorithmType) {
    
    this.algorithmType = algorithmType;
    return this;
  }

   /**
   * Get algorithmType
   * @return algorithmType
  **/
  @javax.annotation.Nullable
  public DnsSecDelegationSignerDigestType getAlgorithmType() {
    return algorithmType;
  }


  public void setAlgorithmType(DnsSecDelegationSignerDigestType algorithmType) {
    this.algorithmType = algorithmType;
  }


  public DnsSecDelegationSigner digest(String digest) {
    
    this.digest = digest;
    return this;
  }

   /**
   * Get digest
   * @return digest
  **/
  @javax.annotation.Nullable
  public String getDigest() {
    return digest;
  }


  public void setDigest(String digest) {
    this.digest = digest;
  }


  public DnsSecDelegationSigner keyTag(Integer keyTag) {
    
    this.keyTag = keyTag;
    return this;
  }

   /**
   * Get keyTag
   * minimum: 1
   * maximum: 65535
   * @return keyTag
  **/
  @javax.annotation.Nullable
  public Integer getKeyTag() {
    return keyTag;
  }


  public void setKeyTag(Integer keyTag) {
    this.keyTag = keyTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DnsSecDelegationSigner dnsSecDelegationSigner = (DnsSecDelegationSigner) o;
    return Objects.equals(this.digestType, dnsSecDelegationSigner.digestType) &&
        Objects.equals(this.algorithmType, dnsSecDelegationSigner.algorithmType) &&
        Objects.equals(this.digest, dnsSecDelegationSigner.digest) &&
        Objects.equals(this.keyTag, dnsSecDelegationSigner.keyTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(digestType, algorithmType, digest, keyTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DnsSecDelegationSigner {\n");
    sb.append("    digestType: ").append(toIndentedString(digestType)).append("\n");
    sb.append("    algorithmType: ").append(toIndentedString(algorithmType)).append("\n");
    sb.append("    digest: ").append(toIndentedString(digest)).append("\n");
    sb.append("    keyTag: ").append(toIndentedString(keyTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("digest_type");
    openapiFields.add("algorithm_type");
    openapiFields.add("digest");
    openapiFields.add("key_tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DnsSecDelegationSigner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DnsSecDelegationSigner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DnsSecDelegationSigner is not found in the empty JSON string", DnsSecDelegationSigner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DnsSecDelegationSigner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DnsSecDelegationSigner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `digest_type`
      if (jsonObj.get("digest_type") != null && !jsonObj.get("digest_type").isJsonNull()) {
        DnsSecDelegationSignerDigestType.validateJsonObject(jsonObj.getAsJsonObject("digest_type"));
      }
      // validate the optional field `algorithm_type`
      if (jsonObj.get("algorithm_type") != null && !jsonObj.get("algorithm_type").isJsonNull()) {
        DnsSecDelegationSignerDigestType.validateJsonObject(jsonObj.getAsJsonObject("algorithm_type"));
      }
      if ((jsonObj.get("digest") != null && !jsonObj.get("digest").isJsonNull()) && !jsonObj.get("digest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `digest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("digest").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DnsSecDelegationSigner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DnsSecDelegationSigner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DnsSecDelegationSigner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DnsSecDelegationSigner.class));

       return (TypeAdapter<T>) new TypeAdapter<DnsSecDelegationSigner>() {
           @Override
           public void write(JsonWriter out, DnsSecDelegationSigner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DnsSecDelegationSigner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DnsSecDelegationSigner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DnsSecDelegationSigner
  * @throws IOException if the JSON string is invalid with respect to DnsSecDelegationSigner
  */
  public static DnsSecDelegationSigner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DnsSecDelegationSigner.class);
  }

 /**
  * Convert an instance of DnsSecDelegationSigner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

