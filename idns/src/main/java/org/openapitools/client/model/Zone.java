/*
 * Intelligent DNS API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Zone
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-02T18:57:15.513698Z[GMT]")
public class Zone {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_RETRY = "retry";
  @SerializedName(SERIALIZED_NAME_RETRY)
  private Integer retry;

  public static final String SERIALIZED_NAME_NX_TTL = "nx_ttl";
  @SerializedName(SERIALIZED_NAME_NX_TTL)
  private Integer nxTtl;

  public static final String SERIALIZED_NAME_SOA_TTL = "soa_ttl";
  @SerializedName(SERIALIZED_NAME_SOA_TTL)
  private Integer soaTtl;

  public static final String SERIALIZED_NAME_REFRESH = "refresh";
  @SerializedName(SERIALIZED_NAME_REFRESH)
  private Integer refresh;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  private Integer expiry;

  public static final String SERIALIZED_NAME_NAMESERVERS = "nameservers";
  @SerializedName(SERIALIZED_NAME_NAMESERVERS)
  private List<String> nameservers;

  public Zone() {
  }

  public Zone id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Hosted zone id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Zone name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Hosted zone name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Zone domain(String domain) {
    
    this.domain = domain;
    return this;
  }

   /**
   * Hosted zone domain
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }


  public void setDomain(String domain) {
    this.domain = domain;
  }


  public Zone isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * If hosted zone is active
   * @return isActive
  **/
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public Zone retry(Integer retry) {
    
    this.retry = retry;
    return this;
  }

   /**
   * Get retry
   * @return retry
  **/
  @javax.annotation.Nullable
  public Integer getRetry() {
    return retry;
  }


  public void setRetry(Integer retry) {
    this.retry = retry;
  }


  public Zone nxTtl(Integer nxTtl) {
    
    this.nxTtl = nxTtl;
    return this;
  }

   /**
   * Get nxTtl
   * @return nxTtl
  **/
  @javax.annotation.Nullable
  public Integer getNxTtl() {
    return nxTtl;
  }


  public void setNxTtl(Integer nxTtl) {
    this.nxTtl = nxTtl;
  }


  public Zone soaTtl(Integer soaTtl) {
    
    this.soaTtl = soaTtl;
    return this;
  }

   /**
   * Get soaTtl
   * @return soaTtl
  **/
  @javax.annotation.Nullable
  public Integer getSoaTtl() {
    return soaTtl;
  }


  public void setSoaTtl(Integer soaTtl) {
    this.soaTtl = soaTtl;
  }


  public Zone refresh(Integer refresh) {
    
    this.refresh = refresh;
    return this;
  }

   /**
   * Get refresh
   * @return refresh
  **/
  @javax.annotation.Nullable
  public Integer getRefresh() {
    return refresh;
  }


  public void setRefresh(Integer refresh) {
    this.refresh = refresh;
  }


  public Zone expiry(Integer expiry) {
    
    this.expiry = expiry;
    return this;
  }

   /**
   * Get expiry
   * @return expiry
  **/
  @javax.annotation.Nullable
  public Integer getExpiry() {
    return expiry;
  }


  public void setExpiry(Integer expiry) {
    this.expiry = expiry;
  }


  public Zone nameservers(List<String> nameservers) {
    
    this.nameservers = nameservers;
    return this;
  }

  public Zone addNameserversItem(String nameserversItem) {
    if (this.nameservers == null) {
      this.nameservers = new ArrayList<>();
    }
    this.nameservers.add(nameserversItem);
    return this;
  }

   /**
   * List of nameservers
   * @return nameservers
  **/
  @javax.annotation.Nullable
  public List<String> getNameservers() {
    return nameservers;
  }


  public void setNameservers(List<String> nameservers) {
    this.nameservers = nameservers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Zone zone = (Zone) o;
    return Objects.equals(this.id, zone.id) &&
        Objects.equals(this.name, zone.name) &&
        Objects.equals(this.domain, zone.domain) &&
        Objects.equals(this.isActive, zone.isActive) &&
        Objects.equals(this.retry, zone.retry) &&
        Objects.equals(this.nxTtl, zone.nxTtl) &&
        Objects.equals(this.soaTtl, zone.soaTtl) &&
        Objects.equals(this.refresh, zone.refresh) &&
        Objects.equals(this.expiry, zone.expiry) &&
        Objects.equals(this.nameservers, zone.nameservers);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, domain, isActive, retry, nxTtl, soaTtl, refresh, expiry, nameservers);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Zone {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    retry: ").append(toIndentedString(retry)).append("\n");
    sb.append("    nxTtl: ").append(toIndentedString(nxTtl)).append("\n");
    sb.append("    soaTtl: ").append(toIndentedString(soaTtl)).append("\n");
    sb.append("    refresh: ").append(toIndentedString(refresh)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    nameservers: ").append(toIndentedString(nameservers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("domain");
    openapiFields.add("is_active");
    openapiFields.add("retry");
    openapiFields.add("nx_ttl");
    openapiFields.add("soa_ttl");
    openapiFields.add("refresh");
    openapiFields.add("expiry");
    openapiFields.add("nameservers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Zone
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Zone.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Zone is not found in the empty JSON string", Zone.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Zone.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Zone` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("nameservers") != null && !jsonObj.get("nameservers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameservers` to be an array in the JSON string but got `%s`", jsonObj.get("nameservers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Zone.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Zone' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Zone> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Zone.class));

       return (TypeAdapter<T>) new TypeAdapter<Zone>() {
           @Override
           public void write(JsonWriter out, Zone value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Zone read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Zone given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Zone
  * @throws IOException if the JSON string is invalid with respect to Zone
  */
  public static Zone fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Zone.class);
  }

 /**
  * Convert an instance of Zone to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

