/*
 * Domain API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDomainRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-22T21:01:29.854303Z[GMT]")
public class UpdateDomainRequest {
  public static final String SERIALIZED_NAME_CNAMES = "cnames";
  @SerializedName(SERIALIZED_NAME_CNAMES)
  private List<String> cnames;

  public static final String SERIALIZED_NAME_CNAME_ACCESS_ONLY = "cname_access_only";
  @SerializedName(SERIALIZED_NAME_CNAME_ACCESS_ONLY)
  private Boolean cnameAccessOnly;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_EDGE_APPLICATION_ID = "edge_application_id";
  @SerializedName(SERIALIZED_NAME_EDGE_APPLICATION_ID)
  private Long edgeApplicationId;

  public static final String SERIALIZED_NAME_DIGITAL_CERTIFICATE_ID = "digital_certificate_id";
  @SerializedName(SERIALIZED_NAME_DIGITAL_CERTIFICATE_ID)
  private Long digitalCertificateId;

  public UpdateDomainRequest() {
  }

  public UpdateDomainRequest cnames(List<String> cnames) {
    
    this.cnames = cnames;
    return this;
  }

  public UpdateDomainRequest addCnamesItem(String cnamesItem) {
    if (this.cnames == null) {
      this.cnames = new ArrayList<>();
    }
    this.cnames.add(cnamesItem);
    return this;
  }

   /**
   * Get cnames
   * @return cnames
  **/
  @javax.annotation.Nullable
  public List<String> getCnames() {
    return cnames;
  }


  public void setCnames(List<String> cnames) {
    this.cnames = cnames;
  }


  public UpdateDomainRequest cnameAccessOnly(Boolean cnameAccessOnly) {
    
    this.cnameAccessOnly = cnameAccessOnly;
    return this;
  }

   /**
   * Get cnameAccessOnly
   * @return cnameAccessOnly
  **/
  @javax.annotation.Nullable
  public Boolean getCnameAccessOnly() {
    return cnameAccessOnly;
  }


  public void setCnameAccessOnly(Boolean cnameAccessOnly) {
    this.cnameAccessOnly = cnameAccessOnly;
  }


  public UpdateDomainRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public UpdateDomainRequest isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nullable
  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public UpdateDomainRequest edgeApplicationId(Long edgeApplicationId) {
    
    this.edgeApplicationId = edgeApplicationId;
    return this;
  }

   /**
   * Get edgeApplicationId
   * @return edgeApplicationId
  **/
  @javax.annotation.Nullable
  public Long getEdgeApplicationId() {
    return edgeApplicationId;
  }


  public void setEdgeApplicationId(Long edgeApplicationId) {
    this.edgeApplicationId = edgeApplicationId;
  }


  public UpdateDomainRequest digitalCertificateId(Long digitalCertificateId) {
    
    this.digitalCertificateId = digitalCertificateId;
    return this;
  }

   /**
   * Get digitalCertificateId
   * @return digitalCertificateId
  **/
  @javax.annotation.Nullable
  public Long getDigitalCertificateId() {
    return digitalCertificateId;
  }


  public void setDigitalCertificateId(Long digitalCertificateId) {
    this.digitalCertificateId = digitalCertificateId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDomainRequest updateDomainRequest = (UpdateDomainRequest) o;
    return Objects.equals(this.cnames, updateDomainRequest.cnames) &&
        Objects.equals(this.cnameAccessOnly, updateDomainRequest.cnameAccessOnly) &&
        Objects.equals(this.name, updateDomainRequest.name) &&
        Objects.equals(this.isActive, updateDomainRequest.isActive) &&
        Objects.equals(this.edgeApplicationId, updateDomainRequest.edgeApplicationId) &&
        Objects.equals(this.digitalCertificateId, updateDomainRequest.digitalCertificateId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(cnames, cnameAccessOnly, name, isActive, edgeApplicationId, digitalCertificateId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDomainRequest {\n");
    sb.append("    cnames: ").append(toIndentedString(cnames)).append("\n");
    sb.append("    cnameAccessOnly: ").append(toIndentedString(cnameAccessOnly)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    edgeApplicationId: ").append(toIndentedString(edgeApplicationId)).append("\n");
    sb.append("    digitalCertificateId: ").append(toIndentedString(digitalCertificateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cnames");
    openapiFields.add("cname_access_only");
    openapiFields.add("name");
    openapiFields.add("is_active");
    openapiFields.add("edge_application_id");
    openapiFields.add("digital_certificate_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UpdateDomainRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UpdateDomainRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDomainRequest is not found in the empty JSON string", UpdateDomainRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UpdateDomainRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDomainRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cnames") != null && !jsonObj.get("cnames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cnames` to be an array in the JSON string but got `%s`", jsonObj.get("cnames").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDomainRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDomainRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDomainRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDomainRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDomainRequest>() {
           @Override
           public void write(JsonWriter out, UpdateDomainRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDomainRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UpdateDomainRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UpdateDomainRequest
  * @throws IOException if the JSON string is invalid with respect to UpdateDomainRequest
  */
  public static UpdateDomainRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDomainRequest.class);
  }

 /**
  * Convert an instance of UpdateDomainRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

