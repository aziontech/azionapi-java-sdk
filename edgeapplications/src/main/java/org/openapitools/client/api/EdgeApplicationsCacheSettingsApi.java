/*
 * Edge Application API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationCacheCreateRequest;
import org.openapitools.client.model.ApplicationCacheCreateResponse;
import org.openapitools.client.model.ApplicationCacheGetOneResponse;
import org.openapitools.client.model.ApplicationCacheGetResponse;
import org.openapitools.client.model.ApplicationCachePatchRequest;
import org.openapitools.client.model.ApplicationCachePatchResponse;
import org.openapitools.client.model.ApplicationCachePutRequest;
import org.openapitools.client.model.ApplicationCachePutResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EdgeApplicationsCacheSettingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EdgeApplicationsCacheSettingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EdgeApplicationsCacheSettingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteCall(Long edgeApplicationId, Long cacheSettingsId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}"
            .replace("{" + "edge_application_id" + "}", localVarApiClient.escapeString(edgeApplicationId.toString()))
            .replace("{" + "cache_settings_id" + "}", localVarApiClient.escapeString(cacheSettingsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteValidateBeforeCall(Long edgeApplicationId, Long cacheSettingsId, String accept, String contentType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeApplicationId' is set
        if (edgeApplicationId == null) {
            throw new ApiException("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(Async)");
        }

        // verify the required parameter 'cacheSettingsId' is set
        if (cacheSettingsId == null) {
            throw new ApiException("Missing the required parameter 'cacheSettingsId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(Async)");
        }

        return edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteCall(edgeApplicationId, cacheSettingsId, accept, contentType, _callback);

    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(Long edgeApplicationId, Long cacheSettingsId, String accept, String contentType) throws ApiException {
        edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteWithHttpInfo(edgeApplicationId, cacheSettingsId, accept, contentType);
    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteWithHttpInfo(Long edgeApplicationId, Long cacheSettingsId, String accept, String contentType) throws ApiException {
        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteValidateBeforeCall(edgeApplicationId, cacheSettingsId, accept, contentType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id: (asynchronously)
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteAsync(Long edgeApplicationId, Long cacheSettingsId, String accept, String contentType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteValidateBeforeCall(edgeApplicationId, cacheSettingsId, accept, contentType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetCall(Long edgeApplicationId, Long cacheSettingsId, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}"
            .replace("{" + "edge_application_id" + "}", localVarApiClient.escapeString(edgeApplicationId.toString()))
            .replace("{" + "cache_settings_id" + "}", localVarApiClient.escapeString(cacheSettingsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; version=3"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetValidateBeforeCall(Long edgeApplicationId, Long cacheSettingsId, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeApplicationId' is set
        if (edgeApplicationId == null) {
            throw new ApiException("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(Async)");
        }

        // verify the required parameter 'cacheSettingsId' is set
        if (cacheSettingsId == null) {
            throw new ApiException("Missing the required parameter 'cacheSettingsId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(Async)");
        }

        return edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetCall(edgeApplicationId, cacheSettingsId, accept, _callback);

    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @return ApplicationCacheGetOneResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationCacheGetOneResponse edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(Long edgeApplicationId, Long cacheSettingsId, String accept) throws ApiException {
        ApiResponse<ApplicationCacheGetOneResponse> localVarResp = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetWithHttpInfo(edgeApplicationId, cacheSettingsId, accept);
        return localVarResp.getData();
    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @return ApiResponse&lt;ApplicationCacheGetOneResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationCacheGetOneResponse> edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetWithHttpInfo(Long edgeApplicationId, Long cacheSettingsId, String accept) throws ApiException {
        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetValidateBeforeCall(edgeApplicationId, cacheSettingsId, accept, null);
        Type localVarReturnType = new TypeToken<ApplicationCacheGetOneResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id: (asynchronously)
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetAsync(Long edgeApplicationId, Long cacheSettingsId, String accept, final ApiCallback<ApplicationCacheGetOneResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetValidateBeforeCall(edgeApplicationId, cacheSettingsId, accept, _callback);
        Type localVarReturnType = new TypeToken<ApplicationCacheGetOneResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param applicationCachePatchRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchCall(Long edgeApplicationId, Long cacheSettingsId, String accept, ApplicationCachePatchRequest applicationCachePatchRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationCachePatchRequest;

        // create path and map variables
        String localVarPath = "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}"
            .replace("{" + "edge_application_id" + "}", localVarApiClient.escapeString(edgeApplicationId.toString()))
            .replace("{" + "cache_settings_id" + "}", localVarApiClient.escapeString(cacheSettingsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; version=3"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; version=3"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchValidateBeforeCall(Long edgeApplicationId, Long cacheSettingsId, String accept, ApplicationCachePatchRequest applicationCachePatchRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeApplicationId' is set
        if (edgeApplicationId == null) {
            throw new ApiException("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(Async)");
        }

        // verify the required parameter 'cacheSettingsId' is set
        if (cacheSettingsId == null) {
            throw new ApiException("Missing the required parameter 'cacheSettingsId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(Async)");
        }

        return edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchCall(edgeApplicationId, cacheSettingsId, accept, applicationCachePatchRequest, _callback);

    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param applicationCachePatchRequest  (optional)
     * @return ApplicationCachePatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationCachePatchResponse edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(Long edgeApplicationId, Long cacheSettingsId, String accept, ApplicationCachePatchRequest applicationCachePatchRequest) throws ApiException {
        ApiResponse<ApplicationCachePatchResponse> localVarResp = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchWithHttpInfo(edgeApplicationId, cacheSettingsId, accept, applicationCachePatchRequest);
        return localVarResp.getData();
    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param applicationCachePatchRequest  (optional)
     * @return ApiResponse&lt;ApplicationCachePatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationCachePatchResponse> edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchWithHttpInfo(Long edgeApplicationId, Long cacheSettingsId, String accept, ApplicationCachePatchRequest applicationCachePatchRequest) throws ApiException {
        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchValidateBeforeCall(edgeApplicationId, cacheSettingsId, accept, applicationCachePatchRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationCachePatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id: (asynchronously)
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param applicationCachePatchRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchAsync(Long edgeApplicationId, Long cacheSettingsId, String accept, ApplicationCachePatchRequest applicationCachePatchRequest, final ApiCallback<ApplicationCachePatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchValidateBeforeCall(edgeApplicationId, cacheSettingsId, accept, applicationCachePatchRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationCachePatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @param applicationCachePutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutCall(Long edgeApplicationId, Long cacheSettingsId, String accept, String contentType, ApplicationCachePutRequest applicationCachePutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationCachePutRequest;

        // create path and map variables
        String localVarPath = "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}"
            .replace("{" + "edge_application_id" + "}", localVarApiClient.escapeString(edgeApplicationId.toString()))
            .replace("{" + "cache_settings_id" + "}", localVarApiClient.escapeString(cacheSettingsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; version=3"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; version=3"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutValidateBeforeCall(Long edgeApplicationId, Long cacheSettingsId, String accept, String contentType, ApplicationCachePutRequest applicationCachePutRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeApplicationId' is set
        if (edgeApplicationId == null) {
            throw new ApiException("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(Async)");
        }

        // verify the required parameter 'cacheSettingsId' is set
        if (cacheSettingsId == null) {
            throw new ApiException("Missing the required parameter 'cacheSettingsId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(Async)");
        }

        return edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutCall(edgeApplicationId, cacheSettingsId, accept, contentType, applicationCachePutRequest, _callback);

    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/ca
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @param applicationCachePutRequest  (optional)
     * @return ApplicationCachePutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationCachePutResponse edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(Long edgeApplicationId, Long cacheSettingsId, String accept, String contentType, ApplicationCachePutRequest applicationCachePutRequest) throws ApiException {
        ApiResponse<ApplicationCachePutResponse> localVarResp = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutWithHttpInfo(edgeApplicationId, cacheSettingsId, accept, contentType, applicationCachePutRequest);
        return localVarResp.getData();
    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/ca
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @param applicationCachePutRequest  (optional)
     * @return ApiResponse&lt;ApplicationCachePutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationCachePutResponse> edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutWithHttpInfo(Long edgeApplicationId, Long cacheSettingsId, String accept, String contentType, ApplicationCachePutRequest applicationCachePutRequest) throws ApiException {
        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutValidateBeforeCall(edgeApplicationId, cacheSettingsId, accept, contentType, applicationCachePutRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationCachePutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings/ca (asynchronously)
     * 
     * @param edgeApplicationId  (required)
     * @param cacheSettingsId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @param applicationCachePutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutAsync(Long edgeApplicationId, Long cacheSettingsId, String accept, String contentType, ApplicationCachePutRequest applicationCachePutRequest, final ApiCallback<ApplicationCachePutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutValidateBeforeCall(edgeApplicationId, cacheSettingsId, accept, contentType, applicationCachePutRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationCachePutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for edgeApplicationsEdgeApplicationIdCacheSettingsGet
     * @param edgeApplicationId  (required)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param filter  (optional)
     * @param orderBy  (optional)
     * @param sort  (optional)
     * @param accept  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsGetCall(Long edgeApplicationId, Long page, Long pageSize, String filter, String orderBy, String sort, String accept, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/edge_applications/{edge_application_id}/cache_settings"
            .replace("{" + "edge_application_id" + "}", localVarApiClient.escapeString(edgeApplicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        final String[] localVarAccepts = {
            "application/json; version=3"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsGetValidateBeforeCall(Long edgeApplicationId, Long page, Long pageSize, String filter, String orderBy, String sort, String accept, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeApplicationId' is set
        if (edgeApplicationId == null) {
            throw new ApiException("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsGet(Async)");
        }

        return edgeApplicationsEdgeApplicationIdCacheSettingsGetCall(edgeApplicationId, page, pageSize, filter, orderBy, sort, accept, _callback);

    }

    /**
     * /edge_applications/{edge_application_id}/cache_settings
     * 
     * @param edgeApplicationId  (required)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param filter  (optional)
     * @param orderBy  (optional)
     * @param sort  (optional)
     * @param accept  (optional)
     * @return ApplicationCacheGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationCacheGetResponse edgeApplicationsEdgeApplicationIdCacheSettingsGet(Long edgeApplicationId, Long page, Long pageSize, String filter, String orderBy, String sort, String accept) throws ApiException {
        ApiResponse<ApplicationCacheGetResponse> localVarResp = edgeApplicationsEdgeApplicationIdCacheSettingsGetWithHttpInfo(edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
        return localVarResp.getData();
    }

    /**
     * /edge_applications/{edge_application_id}/cache_settings
     * 
     * @param edgeApplicationId  (required)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param filter  (optional)
     * @param orderBy  (optional)
     * @param sort  (optional)
     * @param accept  (optional)
     * @return ApiResponse&lt;ApplicationCacheGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationCacheGetResponse> edgeApplicationsEdgeApplicationIdCacheSettingsGetWithHttpInfo(Long edgeApplicationId, Long page, Long pageSize, String filter, String orderBy, String sort, String accept) throws ApiException {
        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsGetValidateBeforeCall(edgeApplicationId, page, pageSize, filter, orderBy, sort, accept, null);
        Type localVarReturnType = new TypeToken<ApplicationCacheGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /edge_applications/{edge_application_id}/cache_settings (asynchronously)
     * 
     * @param edgeApplicationId  (required)
     * @param page  (optional)
     * @param pageSize  (optional)
     * @param filter  (optional)
     * @param orderBy  (optional)
     * @param sort  (optional)
     * @param accept  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsGetAsync(Long edgeApplicationId, Long page, Long pageSize, String filter, String orderBy, String sort, String accept, final ApiCallback<ApplicationCacheGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsGetValidateBeforeCall(edgeApplicationId, page, pageSize, filter, orderBy, sort, accept, _callback);
        Type localVarReturnType = new TypeToken<ApplicationCacheGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for edgeApplicationsEdgeApplicationIdCacheSettingsPost
     * @param edgeApplicationId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @param applicationCacheCreateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsPostCall(Long edgeApplicationId, String accept, String contentType, ApplicationCacheCreateRequest applicationCacheCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = applicationCacheCreateRequest;

        // create path and map variables
        String localVarPath = "/edge_applications/{edge_application_id}/cache_settings"
            .replace("{" + "edge_application_id" + "}", localVarApiClient.escapeString(edgeApplicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accept != null) {
            localVarHeaderParams.put("Accept", localVarApiClient.parameterToString(accept));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json; version=3"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json; version=3"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "tokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsPostValidateBeforeCall(Long edgeApplicationId, String accept, String contentType, ApplicationCacheCreateRequest applicationCacheCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edgeApplicationId' is set
        if (edgeApplicationId == null) {
            throw new ApiException("Missing the required parameter 'edgeApplicationId' when calling edgeApplicationsEdgeApplicationIdCacheSettingsPost(Async)");
        }

        return edgeApplicationsEdgeApplicationIdCacheSettingsPostCall(edgeApplicationId, accept, contentType, applicationCacheCreateRequest, _callback);

    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings
     * 
     * @param edgeApplicationId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @param applicationCacheCreateRequest  (optional)
     * @return ApplicationCacheCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationCacheCreateResponse edgeApplicationsEdgeApplicationIdCacheSettingsPost(Long edgeApplicationId, String accept, String contentType, ApplicationCacheCreateRequest applicationCacheCreateRequest) throws ApiException {
        ApiResponse<ApplicationCacheCreateResponse> localVarResp = edgeApplicationsEdgeApplicationIdCacheSettingsPostWithHttpInfo(edgeApplicationId, accept, contentType, applicationCacheCreateRequest);
        return localVarResp.getData();
    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings
     * 
     * @param edgeApplicationId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @param applicationCacheCreateRequest  (optional)
     * @return ApiResponse&lt;ApplicationCacheCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationCacheCreateResponse> edgeApplicationsEdgeApplicationIdCacheSettingsPostWithHttpInfo(Long edgeApplicationId, String accept, String contentType, ApplicationCacheCreateRequest applicationCacheCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsPostValidateBeforeCall(edgeApplicationId, accept, contentType, applicationCacheCreateRequest, null);
        Type localVarReturnType = new TypeToken<ApplicationCacheCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /edge_applications/:edge_application_id:/cache_settings (asynchronously)
     * 
     * @param edgeApplicationId  (required)
     * @param accept  (optional)
     * @param contentType The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)
     * @param applicationCacheCreateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call edgeApplicationsEdgeApplicationIdCacheSettingsPostAsync(Long edgeApplicationId, String accept, String contentType, ApplicationCacheCreateRequest applicationCacheCreateRequest, final ApiCallback<ApplicationCacheCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = edgeApplicationsEdgeApplicationIdCacheSettingsPostValidateBeforeCall(edgeApplicationId, accept, contentType, applicationCacheCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ApplicationCacheCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
