/*
 * Network Lists API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNetworkListsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-16T13:40:50.657760Z[GMT]")
public class CreateNetworkListsRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ITEMS_VALUES = "items_values";
  @SerializedName(SERIALIZED_NAME_ITEMS_VALUES)
  private List<String> itemsValues;

  /**
   * Gets or Sets listType
   */
  @JsonAdapter(ListTypeEnum.Adapter.class)
  public enum ListTypeEnum {
    IP_CIDR("ip_cidr"),
    
    ASN("asn"),
    
    COUNTRIES("countries");

    private String value;

    ListTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ListTypeEnum fromValue(String value) {
      for (ListTypeEnum b : ListTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ListTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ListTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ListTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ListTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LIST_TYPE = "list_type";
  @SerializedName(SERIALIZED_NAME_LIST_TYPE)
  private ListTypeEnum listType;

  public CreateNetworkListsRequest() {
  }

  public CreateNetworkListsRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public CreateNetworkListsRequest itemsValues(List<String> itemsValues) {
    
    this.itemsValues = itemsValues;
    return this;
  }

  public CreateNetworkListsRequest addItemsValuesItem(String itemsValuesItem) {
    if (this.itemsValues == null) {
      this.itemsValues = new ArrayList<>();
    }
    this.itemsValues.add(itemsValuesItem);
    return this;
  }

   /**
   * Get itemsValues
   * @return itemsValues
  **/
  @javax.annotation.Nullable
  public List<String> getItemsValues() {
    return itemsValues;
  }


  public void setItemsValues(List<String> itemsValues) {
    this.itemsValues = itemsValues;
  }


  public CreateNetworkListsRequest listType(ListTypeEnum listType) {
    
    this.listType = listType;
    return this;
  }

   /**
   * Get listType
   * @return listType
  **/
  @javax.annotation.Nullable
  public ListTypeEnum getListType() {
    return listType;
  }


  public void setListType(ListTypeEnum listType) {
    this.listType = listType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNetworkListsRequest createNetworkListsRequest = (CreateNetworkListsRequest) o;
    return Objects.equals(this.name, createNetworkListsRequest.name) &&
        Objects.equals(this.itemsValues, createNetworkListsRequest.itemsValues) &&
        Objects.equals(this.listType, createNetworkListsRequest.listType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, itemsValues, listType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNetworkListsRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    itemsValues: ").append(toIndentedString(itemsValues)).append("\n");
    sb.append("    listType: ").append(toIndentedString(listType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("items_values");
    openapiFields.add("list_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateNetworkListsRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateNetworkListsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNetworkListsRequest is not found in the empty JSON string", CreateNetworkListsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateNetworkListsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNetworkListsRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("items_values") != null && !jsonObj.get("items_values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `items_values` to be an array in the JSON string but got `%s`", jsonObj.get("items_values").toString()));
      }
      if ((jsonObj.get("list_type") != null && !jsonObj.get("list_type").isJsonNull()) && !jsonObj.get("list_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `list_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("list_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNetworkListsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNetworkListsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNetworkListsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNetworkListsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNetworkListsRequest>() {
           @Override
           public void write(JsonWriter out, CreateNetworkListsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNetworkListsRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateNetworkListsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateNetworkListsRequest
  * @throws IOException if the JSON string is invalid with respect to CreateNetworkListsRequest
  */
  public static CreateNetworkListsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNetworkListsRequest.class);
  }

 /**
  * Convert an instance of CreateNetworkListsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

