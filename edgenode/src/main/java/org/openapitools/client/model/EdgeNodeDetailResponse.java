/*
 * Edgenode API
 * Azion Orchestration
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.EdgeNodeModules;
import org.openapitools.client.model.NodeGroup;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EdgeNodeDetailResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-01T15:35:07.577693Z[GMT]")
public class EdgeNodeDetailResponse {
  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<NodeGroup> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_SERVICES = "has_services";
  @SerializedName(SERIALIZED_NAME_HAS_SERVICES)
  private Boolean hasServices;

  public static final String SERIALIZED_NAME_HASH_ID = "hash_id";
  @SerializedName(SERIALIZED_NAME_HASH_ID)
  private String hashId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MODULES = "modules";
  @SerializedName(SERIALIZED_NAME_MODULES)
  private EdgeNodeModules modules;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public EdgeNodeDetailResponse() {
  }

  public EdgeNodeDetailResponse groups(List<NodeGroup> groups) {
    
    this.groups = groups;
    return this;
  }

  public EdgeNodeDetailResponse addGroupsItem(NodeGroup groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * Get groups
   * @return groups
  **/
  @javax.annotation.Nonnull
  public List<NodeGroup> getGroups() {
    return groups;
  }


  public void setGroups(List<NodeGroup> groups) {
    this.groups = groups;
  }


  public EdgeNodeDetailResponse hasServices(Boolean hasServices) {
    
    this.hasServices = hasServices;
    return this;
  }

   /**
   * Get hasServices
   * @return hasServices
  **/
  @javax.annotation.Nonnull
  public Boolean getHasServices() {
    return hasServices;
  }


  public void setHasServices(Boolean hasServices) {
    this.hasServices = hasServices;
  }


  public EdgeNodeDetailResponse hashId(String hashId) {
    
    this.hashId = hashId;
    return this;
  }

   /**
   * Get hashId
   * @return hashId
  **/
  @javax.annotation.Nonnull
  public String getHashId() {
    return hashId;
  }


  public void setHashId(String hashId) {
    this.hashId = hashId;
  }


  public EdgeNodeDetailResponse id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public EdgeNodeDetailResponse modules(EdgeNodeModules modules) {
    
    this.modules = modules;
    return this;
  }

   /**
   * Get modules
   * @return modules
  **/
  @javax.annotation.Nonnull
  public EdgeNodeModules getModules() {
    return modules;
  }


  public void setModules(EdgeNodeModules modules) {
    this.modules = modules;
  }


  public EdgeNodeDetailResponse name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdgeNodeDetailResponse edgeNodeDetailResponse = (EdgeNodeDetailResponse) o;
    return Objects.equals(this.groups, edgeNodeDetailResponse.groups) &&
        Objects.equals(this.hasServices, edgeNodeDetailResponse.hasServices) &&
        Objects.equals(this.hashId, edgeNodeDetailResponse.hashId) &&
        Objects.equals(this.id, edgeNodeDetailResponse.id) &&
        Objects.equals(this.modules, edgeNodeDetailResponse.modules) &&
        Objects.equals(this.name, edgeNodeDetailResponse.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groups, hasServices, hashId, id, modules, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdgeNodeDetailResponse {\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    hasServices: ").append(toIndentedString(hasServices)).append("\n");
    sb.append("    hashId: ").append(toIndentedString(hashId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groups");
    openapiFields.add("has_services");
    openapiFields.add("hash_id");
    openapiFields.add("id");
    openapiFields.add("modules");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("groups");
    openapiRequiredFields.add("has_services");
    openapiRequiredFields.add("hash_id");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("modules");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EdgeNodeDetailResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EdgeNodeDetailResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EdgeNodeDetailResponse is not found in the empty JSON string", EdgeNodeDetailResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EdgeNodeDetailResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EdgeNodeDetailResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EdgeNodeDetailResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }

      JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
      // validate the required field `groups` (array)
      for (int i = 0; i < jsonArraygroups.size(); i++) {
        NodeGroup.validateJsonObject(jsonArraygroups.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("hash_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash_id").toString()));
      }
      // validate the required field `modules`
      EdgeNodeModules.validateJsonObject(jsonObj.getAsJsonObject("modules"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EdgeNodeDetailResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EdgeNodeDetailResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EdgeNodeDetailResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EdgeNodeDetailResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EdgeNodeDetailResponse>() {
           @Override
           public void write(JsonWriter out, EdgeNodeDetailResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EdgeNodeDetailResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EdgeNodeDetailResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EdgeNodeDetailResponse
  * @throws IOException if the JSON string is invalid with respect to EdgeNodeDetailResponse
  */
  public static EdgeNodeDetailResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EdgeNodeDetailResponse.class);
  }

 /**
  * Convert an instance of EdgeNodeDetailResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

