/*
 * Edgenode API
 * Azion Orchestration
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthorizeEdgeNodesRequest;
import org.openapitools.client.model.AuthorizeEdgeNodesResponse;
import org.openapitools.client.model.EdgeNodeDetailResponse;
import org.openapitools.client.model.EdgeNodeResponseWithTotal;
import org.openapitools.client.model.NodeGroupResponse;
import org.openapitools.client.model.ServiceBindDetailResponse;
import org.openapitools.client.model.ServiceBindRequest;
import org.openapitools.client.model.ServiceResponseWithTotal;
import org.openapitools.client.model.UpdateEdgeNodeResponse;
import org.openapitools.client.model.UpdateServiceBindRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Authorize edge-node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizeEdgeNodeTest() throws ApiException {
        AuthorizeEdgeNodesRequest authorizeEdgeNodesRequest = null;
        AuthorizeEdgeNodesResponse response = api.authorizeEdgeNode(authorizeEdgeNodesRequest);
        // TODO: test validations
    }

    /**
     * Create an edge-node Service association
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEdgeNodeSvcsTest() throws ApiException {
        Long edgenodeId = null;
        ServiceBindRequest serviceBindRequest = null;
        ServiceBindDetailResponse response = api.createEdgeNodeSvcs(edgenodeId, serviceBindRequest);
        // TODO: test validations
    }

    /**
     * Delete edge-node by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delEdgeNodeTest() throws ApiException {
        Long edgenodeId = null;
        api.delEdgeNode(edgenodeId);
        // TODO: test validations
    }

    /**
     * Delete an edge-node Service association
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delEdgeNodeSvcTest() throws ApiException {
        Long edgenodeId = null;
        Long bindId = null;
        api.delEdgeNodeSvc(edgenodeId, bindId);
        // TODO: test validations
    }

    /**
     * Return edge-node by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEdgeNodeTest() throws ApiException {
        Long edgenodeId = null;
        EdgeNodeDetailResponse response = api.getEdgeNode(edgenodeId);
        // TODO: test validations
    }

    /**
     * Return edge-node groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEdgeNodeGroupsTest() throws ApiException {
        List<NodeGroupResponse> response = api.getEdgeNodeGroups();
        // TODO: test validations
    }

    /**
     * Return edge-node Service association by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEdgeNodeSvcDetailTest() throws ApiException {
        Long edgenodeId = null;
        Long bindId = null;
        ServiceBindDetailResponse response = api.getEdgeNodeSvcDetail(edgenodeId, bindId);
        // TODO: test validations
    }

    /**
     * Return edge-node Services association
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEdgeNodeSvcsTest() throws ApiException {
        Long edgenodeId = null;
        Boolean isBound = null;
        String filter = null;
        String orderBy = null;
        String sort = null;
        Long page = null;
        Long pageSize = null;
        ServiceResponseWithTotal response = api.getEdgeNodeSvcs(edgenodeId, isBound, filter, orderBy, sort, page, pageSize);
        // TODO: test validations
    }

    /**
     * Return edge-nodes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEdgeNodesTest() throws ApiException {
        String filter = null;
        String orderBy = null;
        String sort = null;
        Boolean onlyIds = null;
        Long pageSize = null;
        EdgeNodeResponseWithTotal response = api.getEdgeNodes(filter, orderBy, sort, onlyIds, pageSize);
        // TODO: test validations
    }

    /**
     * Update edge-node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEdgeNodeTest() throws ApiException {
        Long edgenodeId = null;
        UpdateEdgeNodeResponse response = api.updateEdgeNode(edgenodeId);
        // TODO: test validations
    }

    /**
     * Update edge-node Service association by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEdgeNodeSvcDetailTest() throws ApiException {
        Long edgenodeId = null;
        Long bindId = null;
        UpdateServiceBindRequest updateServiceBindRequest = null;
        ServiceBindDetailResponse response = api.updateEdgeNodeSvcDetail(edgenodeId, bindId, updateServiceBindRequest);
        // TODO: test validations
    }

}
