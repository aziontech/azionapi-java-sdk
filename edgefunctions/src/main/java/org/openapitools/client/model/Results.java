/*
 * Edge Function API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Results
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-30T17:06:16.017714Z[GMT]")
public class Results {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_JSON_ARGS = "json_args";
  @SerializedName(SERIALIZED_NAME_JSON_ARGS)
  private Object jsonArgs = null;

  public static final String SERIALIZED_NAME_FUNCTION_TO_RUN = "function_to_run";
  @SerializedName(SERIALIZED_NAME_FUNCTION_TO_RUN)
  private String functionToRun;

  public static final String SERIALIZED_NAME_INITIATOR_TYPE = "initiator_type";
  @SerializedName(SERIALIZED_NAME_INITIATOR_TYPE)
  private String initiatorType;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_LAST_EDITOR = "last_editor";
  @SerializedName(SERIALIZED_NAME_LAST_EDITOR)
  private String lastEditor;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private String modified;

  public static final String SERIALIZED_NAME_REFERENCE_COUNT = "reference_count";
  @SerializedName(SERIALIZED_NAME_REFERENCE_COUNT)
  private Long referenceCount;

  public static final String SERIALIZED_NAME_IS_PROPRIETARY_CODE = "is_proprietary_code";
  @SerializedName(SERIALIZED_NAME_IS_PROPRIETARY_CODE)
  private Boolean isProprietaryCode;

  public Results() {
  }

  public Results id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public Results name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Results language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public Results code(String code) {
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    this.code = code;
  }


  public Results jsonArgs(Object jsonArgs) {
    
    this.jsonArgs = jsonArgs;
    return this;
  }

   /**
   * Get jsonArgs
   * @return jsonArgs
  **/
  @javax.annotation.Nullable
  public Object getJsonArgs() {
    return jsonArgs;
  }


  public void setJsonArgs(Object jsonArgs) {
    this.jsonArgs = jsonArgs;
  }


  public Results functionToRun(String functionToRun) {
    
    this.functionToRun = functionToRun;
    return this;
  }

   /**
   * Get functionToRun
   * @return functionToRun
  **/
  @javax.annotation.Nullable
  public String getFunctionToRun() {
    return functionToRun;
  }


  public void setFunctionToRun(String functionToRun) {
    this.functionToRun = functionToRun;
  }


  public Results initiatorType(String initiatorType) {
    
    this.initiatorType = initiatorType;
    return this;
  }

   /**
   * Get initiatorType
   * @return initiatorType
  **/
  @javax.annotation.Nullable
  public String getInitiatorType() {
    return initiatorType;
  }


  public void setInitiatorType(String initiatorType) {
    this.initiatorType = initiatorType;
  }


  public Results active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }


  public void setActive(Boolean active) {
    this.active = active;
  }


  public Results lastEditor(String lastEditor) {
    
    this.lastEditor = lastEditor;
    return this;
  }

   /**
   * Get lastEditor
   * @return lastEditor
  **/
  @javax.annotation.Nullable
  public String getLastEditor() {
    return lastEditor;
  }


  public void setLastEditor(String lastEditor) {
    this.lastEditor = lastEditor;
  }


  public Results modified(String modified) {
    
    this.modified = modified;
    return this;
  }

   /**
   * Get modified
   * @return modified
  **/
  @javax.annotation.Nullable
  public String getModified() {
    return modified;
  }


  public void setModified(String modified) {
    this.modified = modified;
  }


  public Results referenceCount(Long referenceCount) {
    
    this.referenceCount = referenceCount;
    return this;
  }

   /**
   * Get referenceCount
   * @return referenceCount
  **/
  @javax.annotation.Nullable
  public Long getReferenceCount() {
    return referenceCount;
  }


  public void setReferenceCount(Long referenceCount) {
    this.referenceCount = referenceCount;
  }


  public Results isProprietaryCode(Boolean isProprietaryCode) {
    
    this.isProprietaryCode = isProprietaryCode;
    return this;
  }

   /**
   * Get isProprietaryCode
   * @return isProprietaryCode
  **/
  @javax.annotation.Nullable
  public Boolean getIsProprietaryCode() {
    return isProprietaryCode;
  }


  public void setIsProprietaryCode(Boolean isProprietaryCode) {
    this.isProprietaryCode = isProprietaryCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Results results = (Results) o;
    return Objects.equals(this.id, results.id) &&
        Objects.equals(this.name, results.name) &&
        Objects.equals(this.language, results.language) &&
        Objects.equals(this.code, results.code) &&
        Objects.equals(this.jsonArgs, results.jsonArgs) &&
        Objects.equals(this.functionToRun, results.functionToRun) &&
        Objects.equals(this.initiatorType, results.initiatorType) &&
        Objects.equals(this.active, results.active) &&
        Objects.equals(this.lastEditor, results.lastEditor) &&
        Objects.equals(this.modified, results.modified) &&
        Objects.equals(this.referenceCount, results.referenceCount) &&
        Objects.equals(this.isProprietaryCode, results.isProprietaryCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, language, code, jsonArgs, functionToRun, initiatorType, active, lastEditor, modified, referenceCount, isProprietaryCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Results {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    jsonArgs: ").append(toIndentedString(jsonArgs)).append("\n");
    sb.append("    functionToRun: ").append(toIndentedString(functionToRun)).append("\n");
    sb.append("    initiatorType: ").append(toIndentedString(initiatorType)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    lastEditor: ").append(toIndentedString(lastEditor)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    referenceCount: ").append(toIndentedString(referenceCount)).append("\n");
    sb.append("    isProprietaryCode: ").append(toIndentedString(isProprietaryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("language");
    openapiFields.add("code");
    openapiFields.add("json_args");
    openapiFields.add("function_to_run");
    openapiFields.add("initiator_type");
    openapiFields.add("active");
    openapiFields.add("last_editor");
    openapiFields.add("modified");
    openapiFields.add("reference_count");
    openapiFields.add("is_proprietary_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Results
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Results.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Results is not found in the empty JSON string", Results.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Results.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Results` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("function_to_run") != null && !jsonObj.get("function_to_run").isJsonNull()) && !jsonObj.get("function_to_run").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `function_to_run` to be a primitive type in the JSON string but got `%s`", jsonObj.get("function_to_run").toString()));
      }
      if ((jsonObj.get("initiator_type") != null && !jsonObj.get("initiator_type").isJsonNull()) && !jsonObj.get("initiator_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initiator_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initiator_type").toString()));
      }
      if ((jsonObj.get("last_editor") != null && !jsonObj.get("last_editor").isJsonNull()) && !jsonObj.get("last_editor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_editor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_editor").toString()));
      }
      if ((jsonObj.get("modified") != null && !jsonObj.get("modified").isJsonNull()) && !jsonObj.get("modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Results.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Results' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Results> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Results.class));

       return (TypeAdapter<T>) new TypeAdapter<Results>() {
           @Override
           public void write(JsonWriter out, Results value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Results read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Results given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Results
  * @throws IOException if the JSON string is invalid with respect to Results
  */
  public static Results fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Results.class);
  }

 /**
  * Convert an instance of Results to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

